
Variador de Frecuencia.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001420  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00001420  000014b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800094  00800094  000014e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f8  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072b  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048e  00000000  00000000  00002723  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00002bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  00002d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000400  00000000  00000000  000031dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000035dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	21 c0       	rjmp	.+66     	; 0x44 <__ctors_end>
       2:	3b c0       	rjmp	.+118    	; 0x7a <__bad_interrupt>
       4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
       6:	39 c0       	rjmp	.+114    	; 0x7a <__bad_interrupt>
       8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
       a:	3a c2       	rjmp	.+1140   	; 0x480 <__vector_5>
       c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
       e:	35 c0       	rjmp	.+106    	; 0x7a <__bad_interrupt>
      10:	dd c1       	rjmp	.+954    	; 0x3cc <__vector_8>
      12:	33 c0       	rjmp	.+102    	; 0x7a <__bad_interrupt>
      14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
      16:	31 c0       	rjmp	.+98     	; 0x7a <__bad_interrupt>
      18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
      1a:	2f c0       	rjmp	.+94     	; 0x7a <__bad_interrupt>
      1c:	5e c2       	rjmp	.+1212   	; 0x4da <__vector_14>
      1e:	2d c0       	rjmp	.+90     	; 0x7a <__bad_interrupt>
      20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
      22:	2b c0       	rjmp	.+86     	; 0x7a <__bad_interrupt>
      24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
      26:	05 a8       	ldd	r0, Z+53	; 0x35
      28:	4c cd       	rjmp	.-1384   	; 0xfffffac2 <__eeprom_end+0xff7efac2>
      2a:	b2 d4       	rcall	.+2404   	; 0x990 <__fp_powser+0x12>
      2c:	4e b9       	out	0x0e, r20	; 14
      2e:	38 36       	cpi	r19, 0x68	; 104
      30:	a9 02       	muls	r26, r25
      32:	0c 50       	subi	r16, 0x0C	; 12
      34:	b9 91       	ld	r27, Y+
      36:	86 88       	ldd	r8, Z+22	; 0x16
      38:	08 3c       	cpi	r16, 0xC8	; 200
      3a:	a6 aa       	std	Z+54, r10	; 0x36
      3c:	aa 2a       	or	r10, r26
      3e:	be 00       	.word	0x00be	; ????
      40:	00 00       	nop
      42:	80 3f       	cpi	r24, 0xF0	; 240

00000044 <__ctors_end>:
      44:	11 24       	eor	r1, r1
      46:	1f be       	out	0x3f, r1	; 63
      48:	cf e5       	ldi	r28, 0x5F	; 95
      4a:	d4 e0       	ldi	r29, 0x04	; 4
      4c:	de bf       	out	0x3e, r29	; 62
      4e:	cd bf       	out	0x3d, r28	; 61

00000050 <__do_copy_data>:
      50:	10 e0       	ldi	r17, 0x00	; 0
      52:	a0 e6       	ldi	r26, 0x60	; 96
      54:	b0 e0       	ldi	r27, 0x00	; 0
      56:	e0 e2       	ldi	r30, 0x20	; 32
      58:	f4 e1       	ldi	r31, 0x14	; 20
      5a:	02 c0       	rjmp	.+4      	; 0x60 <__do_copy_data+0x10>
      5c:	05 90       	lpm	r0, Z+
      5e:	0d 92       	st	X+, r0
      60:	a4 39       	cpi	r26, 0x94	; 148
      62:	b1 07       	cpc	r27, r17
      64:	d9 f7       	brne	.-10     	; 0x5c <__do_copy_data+0xc>

00000066 <__do_clear_bss>:
      66:	20 e0       	ldi	r18, 0x00	; 0
      68:	a4 e9       	ldi	r26, 0x94	; 148
      6a:	b0 e0       	ldi	r27, 0x00	; 0
      6c:	01 c0       	rjmp	.+2      	; 0x70 <.do_clear_bss_start>

0000006e <.do_clear_bss_loop>:
      6e:	1d 92       	st	X+, r1

00000070 <.do_clear_bss_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b2 07       	cpc	r27, r18
      74:	e1 f7       	brne	.-8      	; 0x6e <.do_clear_bss_loop>
      76:	fc d0       	rcall	.+504    	; 0x270 <main>
      78:	d1 c9       	rjmp	.-3166   	; 0xfffff41c <__eeprom_end+0xff7ef41c>

0000007a <__bad_interrupt>:
      7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <usart_setup>:
	while(*data)
	{
		usart_tx(*data);
		data++;
	}
}
      7c:	10 bc       	out	0x20, r1	; 32
      7e:	87 e6       	ldi	r24, 0x67	; 103
      80:	89 b9       	out	0x09, r24	; 9
      82:	8a b1       	in	r24, 0x0a	; 10
      84:	88 61       	ori	r24, 0x18	; 24
      86:	8a b9       	out	0x0a, r24	; 10
      88:	80 b5       	in	r24, 0x20	; 32
      8a:	8e 68       	ori	r24, 0x8E	; 142
      8c:	80 bd       	out	0x20, r24	; 32
      8e:	88 e6       	ldi	r24, 0x68	; 104
      90:	90 e0       	ldi	r25, 0x00	; 0
      92:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__iob+0x3>
      96:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__iob+0x2>
      9a:	08 95       	ret

0000009c <usart_tx>:
      9c:	5d 9b       	sbis	0x0b, 5	; 11
      9e:	fe cf       	rjmp	.-4      	; 0x9c <usart_tx>
      a0:	8c b9       	out	0x0c, r24	; 12
      a2:	08 95       	ret

000000a4 <USART_printChart>:
      a4:	fb df       	rcall	.-10     	; 0x9c <usart_tx>
      a6:	80 e0       	ldi	r24, 0x00	; 0
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	08 95       	ret

000000ac <setup_TIMER>:
	
	Igualando ecucanción 1 y 2, Calculamos el TOP Value:
	TOP = (freq_reloj)/(freq_seno)/(4*mf) 
	*/
	/************************************************************************************************************************************/	
	TCCR1A = theTCCR1A; // 0b10000010 (Phase Correct) or 0b10000000 (Phase & Frequency Correct);
      ac:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <theTCCR1A>
      b0:	8f bd       	out	0x2f, r24	; 47
	/*10 Se limpia a cero con una comparacion, set at BOTTOM for compA.
	00 compB incialmente desconectado, luego se conmuta por el compA.
	00
	10 WGM1 1:0 para la forma de onda PWM, Phase Correct | 00 WGM1 1:0 para la forma de onda PWM, Phase & Frequency Correct
	*/
	TCCR1B = 0b00010001;
      b2:	81 e1       	ldi	r24, 0x11	; 17
      b4:	8e bd       	out	0x2e, r24	; 46
	10 WGM1 3:2 para la forma de onda PWM, Phase Correct o PWM, Phase & Frequency Correct
	001 sin prescalador para el conteo | 000 El conteo es parado.
	*/

	//TIMSK = 0b00100100;
	TIMSK = 0b00000100;
      b6:	84 e0       	ldi	r24, 0x04	; 4
      b8:	89 bf       	out	0x39, r24	; 57
	/*
	0 (TICIE1):	ICF1 Interrupción por input capture habilitado.
	1 (TOIE1):	TOV1 Interrupción por sobre flujo habilitado.
	*/
	ICR1   = Amplitud_Triangular;   
      ba:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <Amplitud_Triangular>
      be:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <Amplitud_Triangular+0x1>
      c2:	97 bd       	out	0x27, r25	; 39
      c4:	86 bd       	out	0x26, r24	; 38
	
	DDRB = 0b00000110;				// Configurar PB1 y PB2 como salidas.
      c6:	86 e0       	ldi	r24, 0x06	; 6
      c8:	87 bb       	out	0x17, r24	; 23
      ca:	08 95       	ret

000000cc <setup_ADC>:

/************************************************************************************/
//Configuración y activación del ADC
void setup_ADC(void)
{
	ADCSRA|= (1<<ADEN|0<<ADIE|1<<ADPS2|1<<ADPS1|1<<ADPS0);
      cc:	86 b1       	in	r24, 0x06	; 6
      ce:	87 68       	ori	r24, 0x87	; 135
      d0:	86 b9       	out	0x06, r24	; 6
	1(ADEN): Habilita el ADC
	1(ADIE): Habilita la interrupción, cuando una conversión a sido completada
	111(ADPS2|ADPS1|ADPS0): Selecciona el Prescalador a utilizar (ej: 111 - Prescaler 128)
	*/
	
	ADMUX |= 1<<REFS0;
      d2:	3e 9a       	sbi	0x07, 6	; 7
      d4:	08 95       	ret

000000d6 <read_ADC>:
	Al colocar el bit ADSC en 1 se inicia la conversión de la señal de entrada de analogica a digital
	el bit ADSC cambia a 0 al concluir la conversión, este dato se utiliza para avisar el registro
	ADC (ADCH y ADCL) ya se encuentra listo con el dato a leer.
	*/
	
	ADCSRA |= (1<<ADSC);
      d6:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
      d8:	36 99       	sbic	0x06, 6	; 6
      da:	fe cf       	rjmp	.-4      	; 0xd8 <read_ADC+0x2>
	return ADC;
      dc:	84 b1       	in	r24, 0x04	; 4
      de:	95 b1       	in	r25, 0x05	; 5
}
      e0:	08 95       	ret

000000e2 <table_block>:

/************************************************************************************/
// Generando tabla de muestras para la onda senoidal.
void table_block(int TOP)
{
      e2:	2f 92       	push	r2
      e4:	3f 92       	push	r3
      e6:	4f 92       	push	r4
      e8:	5f 92       	push	r5
      ea:	6f 92       	push	r6
      ec:	7f 92       	push	r7
      ee:	8f 92       	push	r8
      f0:	9f 92       	push	r9
      f2:	af 92       	push	r10
      f4:	bf 92       	push	r11
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	00 d0       	rcall	.+0      	; 0x108 <table_block+0x26>
     108:	00 d0       	rcall	.+0      	; 0x10a <table_block+0x28>
     10a:	00 d0       	rcall	.+0      	; 0x10c <table_block+0x2a>
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
	static int m = -1;		//Variable usada como memoria del estado anterior del valor registrado en el ADC
	double temp;			//Variable doble para funciones <math.h>.
	
	if (n!=m)				//Condición para evaluar si el valor registrado en el ADC ha cambiado
     110:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <m.2165>
     114:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <m.2165+0x1>
     118:	05 2e       	mov	r0, r21
     11a:	00 0c       	add	r0, r0
     11c:	66 0b       	sbc	r22, r22
     11e:	77 0b       	sbc	r23, r23
     120:	00 91 a4 00 	lds	r16, 0x00A4	; 0x8000a4 <n>
     124:	10 91 a5 00 	lds	r17, 0x00A5	; 0x8000a5 <n+0x1>
     128:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <n+0x2>
     12c:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <n+0x3>
     130:	40 17       	cp	r20, r16
     132:	51 07       	cpc	r21, r17
     134:	62 07       	cpc	r22, r18
     136:	73 07       	cpc	r23, r19
     138:	09 f4       	brne	.+2      	; 0x13c <table_block+0x5a>
     13a:	81 c0       	rjmp	.+258    	; 0x23e <table_block+0x15c>
     13c:	7c 01       	movw	r14, r24
		//free(lookUp_1);		//Se libera el espacio de memoria antes de empezar a grabar nuevos valores en la tabla de datos
		/*****************************************************************************************
		Bucle para calcular todos los valores de comparación de la senoidal con la onda triangular
		*/
		
		lookUp_1 = realloc(lookUp_1, SinDivisions_1 * sizeof(int));		//Se redimensiona el espacio de memoria de acuerdo a la cantidad de divisiones para la onda senoidal
     13e:	a0 90 a2 00 	lds	r10, 0x00A2	; 0x8000a2 <SinDivisions_1>
     142:	b0 90 a3 00 	lds	r11, 0x00A3	; 0x8000a3 <SinDivisions_1+0x1>
     146:	15 01       	movw	r2, r10
     148:	22 0c       	add	r2, r2
     14a:	33 1c       	adc	r3, r3
     14c:	b1 01       	movw	r22, r2
     14e:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <lookUp_1>
     152:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <lookUp_1+0x1>
     156:	c7 d5       	rcall	.+2958   	; 0xce6 <realloc>
     158:	4c 01       	movw	r8, r24
     15a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <lookUp_1+0x1>
     15e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <lookUp_1>
		
		for(int i = 0; i < SinDivisions_1; i++)
     162:	1a 14       	cp	r1, r10
     164:	1b 04       	cpc	r1, r11
     166:	0c f0       	brlt	.+2      	; 0x16a <table_block+0x88>
     168:	42 c0       	rjmp	.+132    	; 0x1ee <table_block+0x10c>
     16a:	8c 01       	movw	r16, r24
     16c:	1e 82       	std	Y+6, r1	; 0x06
     16e:	1d 82       	std	Y+5, r1	; 0x05
		{
			temp = sin((i)*M_PI/(SinDivisions_1-1))*TOP;
     170:	25 01       	movw	r4, r10
     172:	21 e0       	ldi	r18, 0x01	; 1
     174:	42 1a       	sub	r4, r18
     176:	51 08       	sbc	r5, r1
     178:	05 2c       	mov	r0, r5
     17a:	00 0c       	add	r0, r0
     17c:	66 08       	sbc	r6, r6
     17e:	77 08       	sbc	r7, r7
			lookUp_1[i] = (int) (temp);						// Redondeado a un entero.
     180:	c7 01       	movw	r24, r14
     182:	ff 0c       	add	r15, r15
     184:	aa 0b       	sbc	r26, r26
     186:	bb 0b       	sbc	r27, r27
     188:	89 83       	std	Y+1, r24	; 0x01
     18a:	9a 83       	std	Y+2, r25	; 0x02
     18c:	ab 83       	std	Y+3, r26	; 0x03
     18e:	bc 83       	std	Y+4, r27	; 0x04
		
		lookUp_1 = realloc(lookUp_1, SinDivisions_1 * sizeof(int));		//Se redimensiona el espacio de memoria de acuerdo a la cantidad de divisiones para la onda senoidal
		
		for(int i = 0; i < SinDivisions_1; i++)
		{
			temp = sin((i)*M_PI/(SinDivisions_1-1))*TOP;
     190:	ad 81       	ldd	r26, Y+5	; 0x05
     192:	be 81       	ldd	r27, Y+6	; 0x06
     194:	bd 01       	movw	r22, r26
     196:	bb 0f       	add	r27, r27
     198:	88 0b       	sbc	r24, r24
     19a:	99 0b       	sbc	r25, r25
     19c:	43 d2       	rcall	.+1158   	; 0x624 <__floatsisf>
     19e:	2b ed       	ldi	r18, 0xDB	; 219
     1a0:	3f e0       	ldi	r19, 0x0F	; 15
     1a2:	49 e4       	ldi	r20, 0x49	; 73
     1a4:	50 e4       	ldi	r21, 0x40	; 64
     1a6:	ca d2       	rcall	.+1428   	; 0x73c <__mulsf3>
     1a8:	6b 01       	movw	r12, r22
     1aa:	7c 01       	movw	r14, r24
     1ac:	c3 01       	movw	r24, r6
     1ae:	b2 01       	movw	r22, r4
     1b0:	39 d2       	rcall	.+1138   	; 0x624 <__floatsisf>
     1b2:	9b 01       	movw	r18, r22
     1b4:	ac 01       	movw	r20, r24
     1b6:	c7 01       	movw	r24, r14
     1b8:	b6 01       	movw	r22, r12
     1ba:	99 d1       	rcall	.+818    	; 0x4ee <__divsf3>
     1bc:	22 d3       	rcall	.+1604   	; 0x802 <sin>
     1be:	6b 01       	movw	r12, r22
     1c0:	7c 01       	movw	r14, r24
			lookUp_1[i] = (int) (temp);						// Redondeado a un entero.
     1c2:	69 81       	ldd	r22, Y+1	; 0x01
     1c4:	7a 81       	ldd	r23, Y+2	; 0x02
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ca:	2c d2       	rcall	.+1112   	; 0x624 <__floatsisf>
     1cc:	a7 01       	movw	r20, r14
     1ce:	96 01       	movw	r18, r12
     1d0:	b5 d2       	rcall	.+1386   	; 0x73c <__mulsf3>
     1d2:	f5 d1       	rcall	.+1002   	; 0x5be <__fixsfsi>
     1d4:	f8 01       	movw	r30, r16
     1d6:	61 93       	st	Z+, r22
     1d8:	71 93       	st	Z+, r23
     1da:	8f 01       	movw	r16, r30
		Bucle para calcular todos los valores de comparación de la senoidal con la onda triangular
		*/
		
		lookUp_1 = realloc(lookUp_1, SinDivisions_1 * sizeof(int));		//Se redimensiona el espacio de memoria de acuerdo a la cantidad de divisiones para la onda senoidal
		
		for(int i = 0; i < SinDivisions_1; i++)
     1dc:	2d 81       	ldd	r18, Y+5	; 0x05
     1de:	3e 81       	ldd	r19, Y+6	; 0x06
     1e0:	2f 5f       	subi	r18, 0xFF	; 255
     1e2:	3f 4f       	sbci	r19, 0xFF	; 255
     1e4:	3e 83       	std	Y+6, r19	; 0x06
     1e6:	2d 83       	std	Y+5, r18	; 0x05
     1e8:	a2 16       	cp	r10, r18
     1ea:	b3 06       	cpc	r11, r19
     1ec:	89 f6       	brne	.-94     	; 0x190 <table_block+0xae>
		{
			temp = sin((i)*M_PI/(SinDivisions_1-1))*TOP;
			lookUp_1[i] = (int) (temp);						// Redondeado a un entero.
		}
		/*****************************************************************************************/
		while (num < SinDivisions_2)
     1ee:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <SinDivisions_2>
     1f2:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <SinDivisions_2+0x1>
     1f6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <num>
     1fa:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <num+0x1>
     1fe:	82 17       	cp	r24, r18
     200:	93 07       	cpc	r25, r19
     202:	cc f3       	brlt	.-14     	; 0x1f6 <table_block+0x114>
		Siendo los datos del array "lookUP_2" los comparados constantemente con los datos de la onda triangular
		*/
		
		//lookUP_2 = realloc(lookUP_2, SinDivisions_1 * sizeof(int));		//Se redimensiona el espacio de memoria de acuerdo a la cantidad de divisiones para la onda senoidal
		
		for(int i=0; i < SinDivisions_1; i++)	
     204:	1a 14       	cp	r1, r10
     206:	1b 04       	cpc	r1, r11
     208:	74 f4       	brge	.+28     	; 0x226 <table_block+0x144>
     20a:	f4 01       	movw	r30, r8
     20c:	a0 91 98 00 	lds	r26, 0x0098	; 0x800098 <lookUP_2>
     210:	b0 91 99 00 	lds	r27, 0x0099	; 0x800099 <lookUP_2+0x1>
     214:	82 0c       	add	r8, r2
     216:	93 1c       	adc	r9, r3
		{
			lookUP_2[i] = lookUp_1[i];
     218:	81 91       	ld	r24, Z+
     21a:	91 91       	ld	r25, Z+
     21c:	8d 93       	st	X+, r24
     21e:	9d 93       	st	X+, r25
		Siendo los datos del array "lookUP_2" los comparados constantemente con los datos de la onda triangular
		*/
		
		//lookUP_2 = realloc(lookUP_2, SinDivisions_1 * sizeof(int));		//Se redimensiona el espacio de memoria de acuerdo a la cantidad de divisiones para la onda senoidal
		
		for(int i=0; i < SinDivisions_1; i++)	
     220:	e8 15       	cp	r30, r8
     222:	f9 05       	cpc	r31, r9
     224:	c9 f7       	brne	.-14     	; 0x218 <table_block+0x136>
		{
			lookUP_2[i] = lookUp_1[i];
		}
		
		SinDivisions_2 = SinDivisions_1;		//Se actualiza el numero de divisiones para la señal senoidal
     226:	b0 92 a1 00 	sts	0x00A1, r11	; 0x8000a1 <SinDivisions_2+0x1>
     22a:	a0 92 a0 00 	sts	0x00A0, r10	; 0x8000a0 <SinDivisions_2>
		/******************************************************************************************/
		m = n;	//Se memoriza el valor registrado por el ADC para una siguiente comparación
     22e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <n>
     232:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <n+0x1>
     236:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <m.2165+0x1>
     23a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <m.2165>
	}
}
     23e:	26 96       	adiw	r28, 0x06	; 6
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	df 90       	pop	r13
     258:	cf 90       	pop	r12
     25a:	bf 90       	pop	r11
     25c:	af 90       	pop	r10
     25e:	9f 90       	pop	r9
     260:	8f 90       	pop	r8
     262:	7f 90       	pop	r7
     264:	6f 90       	pop	r6
     266:	5f 90       	pop	r5
     268:	4f 90       	pop	r4
     26a:	3f 90       	pop	r3
     26c:	2f 90       	pop	r2
     26e:	08 95       	ret

00000270 <main>:
	Calloc: Funcion que cumple la misma funcion que Malloc, pero adicionalmente inicializa los valores a 0
	Free: Libera el espacio de memoria reservada previamente por Malloc o Calloc
	Realloc: Redimensiona el espacio de memoria previamente designado por Malloc o Calloc y adicionalmente este no debe haber sido liberado por la función Free 
	*/
	
	lookUp_1 = (unsigned int*)calloc(200,sizeof(int));			
     270:	62 e0       	ldi	r22, 0x02	; 2
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	88 ec       	ldi	r24, 0xC8	; 200
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	fb d3       	rcall	.+2038   	; 0xa70 <calloc>
     27a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <lookUp_1+0x1>
     27e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <lookUp_1>
	lookUP_2 = (unsigned int*)calloc(200,sizeof(int));
     282:	62 e0       	ldi	r22, 0x02	; 2
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	88 ec       	ldi	r24, 0xC8	; 200
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	f2 d3       	rcall	.+2020   	; 0xa70 <calloc>
     28c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <lookUP_2+0x1>
     290:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <lookUP_2>
	
	setup_ADC();		// Funcion para configura el ADC
     294:	1b df       	rcall	.-458    	; 0xcc <setup_ADC>
	setup_TIMER();		// Funcion para configurar el TIMER
     296:	0a df       	rcall	.-492    	; 0xac <setup_TIMER>
	usart_setup();		// Funcion para configurar la comunicacion serial por USART
     298:	f1 de       	rcall	.-542    	; 0x7c <usart_setup>
	
	sei();             	// Habilitar interruciones globales.
     29a:	78 94       	sei
		
		Min: 50 Hz
		Max: 2000 Hz
		*/
		
		freq_seno_variable = 50 + (n*(freq_seno-50))/1023;
     29c:	0f 2e       	mov	r0, r31
     29e:	44 24       	eor	r4, r4
     2a0:	4a 94       	dec	r4
     2a2:	f3 e0       	ldi	r31, 0x03	; 3
     2a4:	5f 2e       	mov	r5, r31
     2a6:	61 2c       	mov	r6, r1
     2a8:	71 2c       	mov	r7, r1
     2aa:	f0 2d       	mov	r31, r0
		printf("freq_seno: %d\n\r",freq_seno_variable);		//Se envia por comunicación serial el valor de la frecuencia senoidal
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f9 e7       	ldi	r31, 0x79	; 121
     2b0:	ef 2e       	mov	r14, r31
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	ff 2e       	mov	r15, r31
     2b6:	f0 2d       	mov	r31, r0
		{
			mf = 40*1e3/freq_seno_variable;		//Maxima valor probado 85 | Minimo valor aceptable probado 40
		}
		else
		{
			mf = 200;
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f8 ec       	ldi	r31, 0xC8	; 200
     2bc:	cf 2e       	mov	r12, r31
     2be:	d1 2c       	mov	r13, r1
     2c0:	f0 2d       	mov	r31, r0
		}
		
		printf("mf: %d\n\r\r",mf);		//Se envia por comunicación serial el valor del indice de modulación en frecuencia (mf)
     2c2:	09 e8       	ldi	r16, 0x89	; 137
     2c4:	10 e0       	ldi	r17, 0x00	; 0
	
	sei();             	// Habilitar interruciones globales.
	
	while(1)			// Bucle infinito
	{
		n = read_ADC();		//Lectura del valor registrado en el ADC finalizado su conversión de analogico a digital
     2c6:	07 df       	rcall	.-498    	; 0xd6 <read_ADC>
     2c8:	9c 01       	movw	r18, r24
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	20 93 a4 00 	sts	0x00A4, r18	; 0x8000a4 <n>
     2d2:	30 93 a5 00 	sts	0x00A5, r19	; 0x8000a5 <n+0x1>
     2d6:	40 93 a6 00 	sts	0x00A6, r20	; 0x8000a6 <n+0x2>
     2da:	50 93 a7 00 	sts	0x00A7, r21	; 0x8000a7 <n+0x3>
		
		Min: 50 Hz
		Max: 2000 Hz
		*/
		
		freq_seno_variable = 50 + (n*(freq_seno-50))/1023;
     2de:	ae e9       	ldi	r26, 0x9E	; 158
     2e0:	b7 e0       	ldi	r27, 0x07	; 7
     2e2:	8e d3       	rcall	.+1820   	; 0xa00 <__muluhisi3>
     2e4:	a3 01       	movw	r20, r6
     2e6:	92 01       	movw	r18, r4
     2e8:	6f d3       	rcall	.+1758   	; 0x9c8 <__divmodsi4>
     2ea:	2e 5c       	subi	r18, 0xCE	; 206
     2ec:	3f 4f       	sbci	r19, 0xFF	; 255
     2ee:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <freq_seno_variable+0x1>
     2f2:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <freq_seno_variable>
		printf("freq_seno: %d\n\r",freq_seno_variable);		//Se envia por comunicación serial el valor de la frecuencia senoidal
     2f6:	3f 93       	push	r19
     2f8:	2f 93       	push	r18
     2fa:	ff 92       	push	r15
     2fc:	ef 92       	push	r14
     2fe:	c2 d5       	rcall	.+2948   	; 0xe84 <printf>
			Es por ello que se agregó la condición en la que, si la freq_senoidal >= 200 Hz el valor del mf será calculado por la
			ecuación (1), de lo contrario el valor de mf se mantendrá constante igual a 200.
		
		*/
		
		if (freq_seno_variable >= 200)
     300:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <freq_seno_variable>
     304:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <freq_seno_variable+0x1>
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	68 3c       	cpi	r22, 0xC8	; 200
     312:	71 05       	cpc	r23, r1
     314:	94 f0       	brlt	.+36     	; 0x33a <main+0xca>
		{
			mf = 40*1e3/freq_seno_variable;		//Maxima valor probado 85 | Minimo valor aceptable probado 40
     316:	07 2e       	mov	r0, r23
     318:	00 0c       	add	r0, r0
     31a:	88 0b       	sbc	r24, r24
     31c:	99 0b       	sbc	r25, r25
     31e:	82 d1       	rcall	.+772    	; 0x624 <__floatsisf>
     320:	9b 01       	movw	r18, r22
     322:	ac 01       	movw	r20, r24
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	70 e4       	ldi	r23, 0x40	; 64
     328:	8c e1       	ldi	r24, 0x1C	; 28
     32a:	97 e4       	ldi	r25, 0x47	; 71
     32c:	e0 d0       	rcall	.+448    	; 0x4ee <__divsf3>
     32e:	47 d1       	rcall	.+654    	; 0x5be <__fixsfsi>
     330:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <mf+0x1>
     334:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <mf>
     338:	04 c0       	rjmp	.+8      	; 0x342 <main+0xd2>
		}
		else
		{
			mf = 200;
     33a:	d0 92 78 00 	sts	0x0078, r13	; 0x800078 <mf+0x1>
     33e:	c0 92 77 00 	sts	0x0077, r12	; 0x800077 <mf>
		}
		
		printf("mf: %d\n\r\r",mf);		//Se envia por comunicación serial el valor del indice de modulación en frecuencia (mf)
     342:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <mf+0x1>
     346:	8f 93       	push	r24
     348:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <mf>
     34c:	8f 93       	push	r24
     34e:	1f 93       	push	r17
     350:	0f 93       	push	r16
     352:	98 d5       	rcall	.+2864   	; 0xe84 <printf>
		
		/****************************************************************************************************************************/
		
		SinDivisions_1 = mf;				// Numero de divisiones para la señal senoidal
     354:	c0 91 77 00 	lds	r28, 0x0077	; 0x800077 <mf>
     358:	d0 91 78 00 	lds	r29, 0x0078	; 0x800078 <mf+0x1>
     35c:	d0 93 a3 00 	sts	0x00A3, r29	; 0x8000a3 <SinDivisions_1+0x1>
     360:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <SinDivisions_1>
		
		Amplitud_Triangular = (microMHz*1e6)/(freq_seno_variable)/(4*mf);	// amplitud de la señal triangular
     364:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <freq_seno_variable>
     368:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <freq_seno_variable+0x1>
     36c:	07 2e       	mov	r0, r23
     36e:	00 0c       	add	r0, r0
     370:	88 0b       	sbc	r24, r24
     372:	99 0b       	sbc	r25, r25
     374:	57 d1       	rcall	.+686    	; 0x624 <__floatsisf>
     376:	9b 01       	movw	r18, r22
     378:	ac 01       	movw	r20, r24
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	74 e2       	ldi	r23, 0x24	; 36
     37e:	84 e7       	ldi	r24, 0x74	; 116
     380:	9b e4       	ldi	r25, 0x4B	; 75
     382:	b5 d0       	rcall	.+362    	; 0x4ee <__divsf3>
     384:	4b 01       	movw	r8, r22
     386:	5c 01       	movw	r10, r24
     388:	cc 0f       	add	r28, r28
     38a:	dd 1f       	adc	r29, r29
     38c:	cc 0f       	add	r28, r28
     38e:	dd 1f       	adc	r29, r29
     390:	be 01       	movw	r22, r28
     392:	dd 0f       	add	r29, r29
     394:	88 0b       	sbc	r24, r24
     396:	99 0b       	sbc	r25, r25
     398:	45 d1       	rcall	.+650    	; 0x624 <__floatsisf>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	c5 01       	movw	r24, r10
     3a0:	b4 01       	movw	r22, r8
     3a2:	a5 d0       	rcall	.+330    	; 0x4ee <__divsf3>
     3a4:	0c d1       	rcall	.+536    	; 0x5be <__fixsfsi>
     3a6:	4b 01       	movw	r8, r22
     3a8:	5c 01       	movw	r10, r24
     3aa:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <Amplitud_Triangular>
     3ae:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <Amplitud_Triangular+0x1>
     3b2:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <Amplitud_Triangular+0x2>
     3b6:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <Amplitud_Triangular+0x3>
		
		table_block(Amplitud_Triangular);	//Función para calcular todos los valores de comparación de la señal senoidal 
     3ba:	cb 01       	movw	r24, r22
     3bc:	92 de       	rcall	.-732    	; 0xe2 <table_block>
		ICR1 = Amplitud_Triangular;			//ICR1 es el TOP Value del Timer1 durante su ejecución
     3be:	97 bc       	out	0x27, r9	; 39
     3c0:	86 bc       	out	0x26, r8	; 38
		
		/****************************************************************************************************************************/
	}
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	7d cf       	rjmp	.-262    	; 0x2c6 <main+0x56>

000003cc <__vector_8>:
}

/***********************************************************************************/
//Funcíón de interrupción por sobreflujo del timer1
ISR(TIMER1_OVF_vect)
{
     3cc:	1f 92       	push	r1
     3ce:	0f 92       	push	r0
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	0f 92       	push	r0
     3d4:	11 24       	eor	r1, r1
     3d6:	2f 93       	push	r18
     3d8:	3f 93       	push	r19
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
	/************************************************************************************************************************************/
	//Codigo para generar un retardo en la primera comparción entre la señal triangular y la senoidal
	//De esta manera se asegura que los mosfet's de ramas distintas no se encuentren conmutadas al mismo tiempo
	
	if (delay1 == 1) {
     3e2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
     3e6:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__data_end+0x1>
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	59 f4       	brne	.+22     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	theTCCR1A ^= 0b10100000; 	// Toggle connect and disconnect of compareoutput A and B // TCCR1A = 0b10000010
     3ee:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <theTCCR1A>
     3f2:	80 ea       	ldi	r24, 0xA0	; 160
     3f4:	89 27       	eor	r24, r25
     3f6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <theTCCR1A>
	TCCR1A = theTCCR1A; 		//TCCR1A = 0b10000010
     3fa:	8f bd       	out	0x2f, r24	; 47
	delay1 = 0;
     3fc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x1>
     400:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
	/****************************************************************************************************************************************************
	Codigo que actualiza el valor del OCR1A/B cada vez que ocurra la interrupción por sobreflujo (Cuando el timer alcance el BOTTOM Value que es de 0x00) 
	Además al cumplir medio ciclo de la onda senoidal conmuta las salidas OC1A y OC1B, desactivandose una de ellas y activandose la otra
	*/
	
	if (num >= SinDivisions_2){
     404:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <num>
     408:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <num+0x1>
     40c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <SinDivisions_2>
     410:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <SinDivisions_2+0x1>
     414:	28 17       	cp	r18, r24
     416:	39 07       	cpc	r19, r25
     418:	6c f0       	brlt	.+26     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		num = 0;                	// Reset num
     41a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <num+0x1>
     41e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <num>
		//theTCCR1A ^= 0b10100000; 	// Toggle connect and disconnect of compareoutput A and B // TCCR1A = 0b10000010
		//TCCR1A = theTCCR1A; 		//TCCR1A = 0b10000010
		
		delay1++;					//delay relaciona con el codigo anterior para generar el retardo
     422:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
     426:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__data_end+0x1>
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__data_end+0x1>
     430:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
	}
	
	OCR1A = OCR1B = lookUP_2[num]; 	// Se actualiza el valor del OCR1A/B, cambiando el ciclo de trabajo (Cada interrpción por sobreflujo)
     434:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <num>
     438:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <num+0x1>
     43c:	ee 0f       	add	r30, r30
     43e:	ff 1f       	adc	r31, r31
     440:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lookUP_2>
     444:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lookUP_2+0x1>
     448:	e8 0f       	add	r30, r24
     44a:	f9 1f       	adc	r31, r25
     44c:	80 81       	ld	r24, Z
     44e:	91 81       	ldd	r25, Z+1	; 0x01
     450:	99 bd       	out	0x29, r25	; 41
     452:	88 bd       	out	0x28, r24	; 40
     454:	9b bd       	out	0x2b, r25	; 43
     456:	8a bd       	out	0x2a, r24	; 42
	num++;	
     458:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <num>
     45c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <num+0x1>
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <num+0x1>
     466:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <num>
	
	/************************************************************************************************************************************/
}
     46a:	ff 91       	pop	r31
     46c:	ef 91       	pop	r30
     46e:	9f 91       	pop	r25
     470:	8f 91       	pop	r24
     472:	3f 91       	pop	r19
     474:	2f 91       	pop	r18
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <__vector_5>:
Esto depende del tipo de onda seleccionada, en este caso se esta escogiendo la forma de onda PWM, Phase & Frequency correct, por lo que el OCR1A/B se actualiza en el BOTTOM Value,
es por ello que el valor OCR1A/B solo se actualizará en el flanco de subida tomando importancia de esta manera el valor que se escriba en el OCR1A/B en la interrupción por sobreflujo
ya que esta interrupción se ejecuta en el BOTTOM Value.
*/
ISR(TIMER1_CAPT_vect)
{
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	8f 93       	push	r24
     48c:	9f 93       	push	r25
     48e:	ef 93       	push	r30
     490:	ff 93       	push	r31
	OCR1A = OCR1B = lookUP_2[num];
     492:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <num>
     496:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <num+0x1>
     49a:	ee 0f       	add	r30, r30
     49c:	ff 1f       	adc	r31, r31
     49e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lookUP_2>
     4a2:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lookUP_2+0x1>
     4a6:	e8 0f       	add	r30, r24
     4a8:	f9 1f       	adc	r31, r25
     4aa:	80 81       	ld	r24, Z
     4ac:	91 81       	ldd	r25, Z+1	; 0x01
     4ae:	99 bd       	out	0x29, r25	; 41
     4b0:	88 bd       	out	0x28, r24	; 40
     4b2:	9b bd       	out	0x2b, r25	; 43
     4b4:	8a bd       	out	0x2a, r24	; 42
	num++;
     4b6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <num>
     4ba:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <num+0x1>
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <num+0x1>
     4c4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <num>
}
     4c8:	ff 91       	pop	r31
     4ca:	ef 91       	pop	r30
     4cc:	9f 91       	pop	r25
     4ce:	8f 91       	pop	r24
     4d0:	0f 90       	pop	r0
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	0f 90       	pop	r0
     4d6:	1f 90       	pop	r1
     4d8:	18 95       	reti

000004da <__vector_14>:

/***********************************************************************************/
//Función de interrupción por fin de conversión del ADC
//Interrupción deshabilitada en la función de configuración Setup_ADC
ISR(ADC_vect)
{
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
	//temp_1 = true;	
     4e4:	0f 90       	pop	r0
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	0f 90       	pop	r0
     4ea:	1f 90       	pop	r1
     4ec:	18 95       	reti

000004ee <__divsf3>:
     4ee:	0c d0       	rcall	.+24     	; 0x508 <__divsf3x>
     4f0:	eb c0       	rjmp	.+470    	; 0x6c8 <__fp_round>
     4f2:	e3 d0       	rcall	.+454    	; 0x6ba <__fp_pscB>
     4f4:	40 f0       	brcs	.+16     	; 0x506 <__divsf3+0x18>
     4f6:	da d0       	rcall	.+436    	; 0x6ac <__fp_pscA>
     4f8:	30 f0       	brcs	.+12     	; 0x506 <__divsf3+0x18>
     4fa:	21 f4       	brne	.+8      	; 0x504 <__divsf3+0x16>
     4fc:	5f 3f       	cpi	r21, 0xFF	; 255
     4fe:	19 f0       	breq	.+6      	; 0x506 <__divsf3+0x18>
     500:	cc c0       	rjmp	.+408    	; 0x69a <__fp_inf>
     502:	51 11       	cpse	r21, r1
     504:	15 c1       	rjmp	.+554    	; 0x730 <__fp_szero>
     506:	cf c0       	rjmp	.+414    	; 0x6a6 <__fp_nan>

00000508 <__divsf3x>:
     508:	f0 d0       	rcall	.+480    	; 0x6ea <__fp_split3>
     50a:	98 f3       	brcs	.-26     	; 0x4f2 <__divsf3+0x4>

0000050c <__divsf3_pse>:
     50c:	99 23       	and	r25, r25
     50e:	c9 f3       	breq	.-14     	; 0x502 <__divsf3+0x14>
     510:	55 23       	and	r21, r21
     512:	b1 f3       	breq	.-20     	; 0x500 <__divsf3+0x12>
     514:	95 1b       	sub	r25, r21
     516:	55 0b       	sbc	r21, r21
     518:	bb 27       	eor	r27, r27
     51a:	aa 27       	eor	r26, r26
     51c:	62 17       	cp	r22, r18
     51e:	73 07       	cpc	r23, r19
     520:	84 07       	cpc	r24, r20
     522:	38 f0       	brcs	.+14     	; 0x532 <__divsf3_pse+0x26>
     524:	9f 5f       	subi	r25, 0xFF	; 255
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	22 0f       	add	r18, r18
     52a:	33 1f       	adc	r19, r19
     52c:	44 1f       	adc	r20, r20
     52e:	aa 1f       	adc	r26, r26
     530:	a9 f3       	breq	.-22     	; 0x51c <__divsf3_pse+0x10>
     532:	33 d0       	rcall	.+102    	; 0x59a <__divsf3_pse+0x8e>
     534:	0e 2e       	mov	r0, r30
     536:	3a f0       	brmi	.+14     	; 0x546 <__divsf3_pse+0x3a>
     538:	e0 e8       	ldi	r30, 0x80	; 128
     53a:	30 d0       	rcall	.+96     	; 0x59c <__divsf3_pse+0x90>
     53c:	91 50       	subi	r25, 0x01	; 1
     53e:	50 40       	sbci	r21, 0x00	; 0
     540:	e6 95       	lsr	r30
     542:	00 1c       	adc	r0, r0
     544:	ca f7       	brpl	.-14     	; 0x538 <__divsf3_pse+0x2c>
     546:	29 d0       	rcall	.+82     	; 0x59a <__divsf3_pse+0x8e>
     548:	fe 2f       	mov	r31, r30
     54a:	27 d0       	rcall	.+78     	; 0x59a <__divsf3_pse+0x8e>
     54c:	66 0f       	add	r22, r22
     54e:	77 1f       	adc	r23, r23
     550:	88 1f       	adc	r24, r24
     552:	bb 1f       	adc	r27, r27
     554:	26 17       	cp	r18, r22
     556:	37 07       	cpc	r19, r23
     558:	48 07       	cpc	r20, r24
     55a:	ab 07       	cpc	r26, r27
     55c:	b0 e8       	ldi	r27, 0x80	; 128
     55e:	09 f0       	breq	.+2      	; 0x562 <__divsf3_pse+0x56>
     560:	bb 0b       	sbc	r27, r27
     562:	80 2d       	mov	r24, r0
     564:	bf 01       	movw	r22, r30
     566:	ff 27       	eor	r31, r31
     568:	93 58       	subi	r25, 0x83	; 131
     56a:	5f 4f       	sbci	r21, 0xFF	; 255
     56c:	2a f0       	brmi	.+10     	; 0x578 <__divsf3_pse+0x6c>
     56e:	9e 3f       	cpi	r25, 0xFE	; 254
     570:	51 05       	cpc	r21, r1
     572:	68 f0       	brcs	.+26     	; 0x58e <__divsf3_pse+0x82>
     574:	92 c0       	rjmp	.+292    	; 0x69a <__fp_inf>
     576:	dc c0       	rjmp	.+440    	; 0x730 <__fp_szero>
     578:	5f 3f       	cpi	r21, 0xFF	; 255
     57a:	ec f3       	brlt	.-6      	; 0x576 <__divsf3_pse+0x6a>
     57c:	98 3e       	cpi	r25, 0xE8	; 232
     57e:	dc f3       	brlt	.-10     	; 0x576 <__divsf3_pse+0x6a>
     580:	86 95       	lsr	r24
     582:	77 95       	ror	r23
     584:	67 95       	ror	r22
     586:	b7 95       	ror	r27
     588:	f7 95       	ror	r31
     58a:	9f 5f       	subi	r25, 0xFF	; 255
     58c:	c9 f7       	brne	.-14     	; 0x580 <__divsf3_pse+0x74>
     58e:	88 0f       	add	r24, r24
     590:	91 1d       	adc	r25, r1
     592:	96 95       	lsr	r25
     594:	87 95       	ror	r24
     596:	97 f9       	bld	r25, 7
     598:	08 95       	ret
     59a:	e1 e0       	ldi	r30, 0x01	; 1
     59c:	66 0f       	add	r22, r22
     59e:	77 1f       	adc	r23, r23
     5a0:	88 1f       	adc	r24, r24
     5a2:	bb 1f       	adc	r27, r27
     5a4:	62 17       	cp	r22, r18
     5a6:	73 07       	cpc	r23, r19
     5a8:	84 07       	cpc	r24, r20
     5aa:	ba 07       	cpc	r27, r26
     5ac:	20 f0       	brcs	.+8      	; 0x5b6 <__divsf3_pse+0xaa>
     5ae:	62 1b       	sub	r22, r18
     5b0:	73 0b       	sbc	r23, r19
     5b2:	84 0b       	sbc	r24, r20
     5b4:	ba 0b       	sbc	r27, r26
     5b6:	ee 1f       	adc	r30, r30
     5b8:	88 f7       	brcc	.-30     	; 0x59c <__divsf3_pse+0x90>
     5ba:	e0 95       	com	r30
     5bc:	08 95       	ret

000005be <__fixsfsi>:
     5be:	04 d0       	rcall	.+8      	; 0x5c8 <__fixunssfsi>
     5c0:	68 94       	set
     5c2:	b1 11       	cpse	r27, r1
     5c4:	b5 c0       	rjmp	.+362    	; 0x730 <__fp_szero>
     5c6:	08 95       	ret

000005c8 <__fixunssfsi>:
     5c8:	98 d0       	rcall	.+304    	; 0x6fa <__fp_splitA>
     5ca:	88 f0       	brcs	.+34     	; 0x5ee <__fixunssfsi+0x26>
     5cc:	9f 57       	subi	r25, 0x7F	; 127
     5ce:	90 f0       	brcs	.+36     	; 0x5f4 <__fixunssfsi+0x2c>
     5d0:	b9 2f       	mov	r27, r25
     5d2:	99 27       	eor	r25, r25
     5d4:	b7 51       	subi	r27, 0x17	; 23
     5d6:	a0 f0       	brcs	.+40     	; 0x600 <__fixunssfsi+0x38>
     5d8:	d1 f0       	breq	.+52     	; 0x60e <__fixunssfsi+0x46>
     5da:	66 0f       	add	r22, r22
     5dc:	77 1f       	adc	r23, r23
     5de:	88 1f       	adc	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	1a f0       	brmi	.+6      	; 0x5ea <__fixunssfsi+0x22>
     5e4:	ba 95       	dec	r27
     5e6:	c9 f7       	brne	.-14     	; 0x5da <__fixunssfsi+0x12>
     5e8:	12 c0       	rjmp	.+36     	; 0x60e <__fixunssfsi+0x46>
     5ea:	b1 30       	cpi	r27, 0x01	; 1
     5ec:	81 f0       	breq	.+32     	; 0x60e <__fixunssfsi+0x46>
     5ee:	9f d0       	rcall	.+318    	; 0x72e <__fp_zero>
     5f0:	b1 e0       	ldi	r27, 0x01	; 1
     5f2:	08 95       	ret
     5f4:	9c c0       	rjmp	.+312    	; 0x72e <__fp_zero>
     5f6:	67 2f       	mov	r22, r23
     5f8:	78 2f       	mov	r23, r24
     5fa:	88 27       	eor	r24, r24
     5fc:	b8 5f       	subi	r27, 0xF8	; 248
     5fe:	39 f0       	breq	.+14     	; 0x60e <__fixunssfsi+0x46>
     600:	b9 3f       	cpi	r27, 0xF9	; 249
     602:	cc f3       	brlt	.-14     	; 0x5f6 <__fixunssfsi+0x2e>
     604:	86 95       	lsr	r24
     606:	77 95       	ror	r23
     608:	67 95       	ror	r22
     60a:	b3 95       	inc	r27
     60c:	d9 f7       	brne	.-10     	; 0x604 <__fixunssfsi+0x3c>
     60e:	3e f4       	brtc	.+14     	; 0x61e <__fixunssfsi+0x56>
     610:	90 95       	com	r25
     612:	80 95       	com	r24
     614:	70 95       	com	r23
     616:	61 95       	neg	r22
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	8f 4f       	sbci	r24, 0xFF	; 255
     61c:	9f 4f       	sbci	r25, 0xFF	; 255
     61e:	08 95       	ret

00000620 <__floatunsisf>:
     620:	e8 94       	clt
     622:	09 c0       	rjmp	.+18     	; 0x636 <__floatsisf+0x12>

00000624 <__floatsisf>:
     624:	97 fb       	bst	r25, 7
     626:	3e f4       	brtc	.+14     	; 0x636 <__floatsisf+0x12>
     628:	90 95       	com	r25
     62a:	80 95       	com	r24
     62c:	70 95       	com	r23
     62e:	61 95       	neg	r22
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	8f 4f       	sbci	r24, 0xFF	; 255
     634:	9f 4f       	sbci	r25, 0xFF	; 255
     636:	99 23       	and	r25, r25
     638:	a9 f0       	breq	.+42     	; 0x664 <__floatsisf+0x40>
     63a:	f9 2f       	mov	r31, r25
     63c:	96 e9       	ldi	r25, 0x96	; 150
     63e:	bb 27       	eor	r27, r27
     640:	93 95       	inc	r25
     642:	f6 95       	lsr	r31
     644:	87 95       	ror	r24
     646:	77 95       	ror	r23
     648:	67 95       	ror	r22
     64a:	b7 95       	ror	r27
     64c:	f1 11       	cpse	r31, r1
     64e:	f8 cf       	rjmp	.-16     	; 0x640 <__floatsisf+0x1c>
     650:	fa f4       	brpl	.+62     	; 0x690 <__floatsisf+0x6c>
     652:	bb 0f       	add	r27, r27
     654:	11 f4       	brne	.+4      	; 0x65a <__floatsisf+0x36>
     656:	60 ff       	sbrs	r22, 0
     658:	1b c0       	rjmp	.+54     	; 0x690 <__floatsisf+0x6c>
     65a:	6f 5f       	subi	r22, 0xFF	; 255
     65c:	7f 4f       	sbci	r23, 0xFF	; 255
     65e:	8f 4f       	sbci	r24, 0xFF	; 255
     660:	9f 4f       	sbci	r25, 0xFF	; 255
     662:	16 c0       	rjmp	.+44     	; 0x690 <__floatsisf+0x6c>
     664:	88 23       	and	r24, r24
     666:	11 f0       	breq	.+4      	; 0x66c <__floatsisf+0x48>
     668:	96 e9       	ldi	r25, 0x96	; 150
     66a:	11 c0       	rjmp	.+34     	; 0x68e <__floatsisf+0x6a>
     66c:	77 23       	and	r23, r23
     66e:	21 f0       	breq	.+8      	; 0x678 <__floatsisf+0x54>
     670:	9e e8       	ldi	r25, 0x8E	; 142
     672:	87 2f       	mov	r24, r23
     674:	76 2f       	mov	r23, r22
     676:	05 c0       	rjmp	.+10     	; 0x682 <__floatsisf+0x5e>
     678:	66 23       	and	r22, r22
     67a:	71 f0       	breq	.+28     	; 0x698 <__floatsisf+0x74>
     67c:	96 e8       	ldi	r25, 0x86	; 134
     67e:	86 2f       	mov	r24, r22
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	2a f0       	brmi	.+10     	; 0x690 <__floatsisf+0x6c>
     686:	9a 95       	dec	r25
     688:	66 0f       	add	r22, r22
     68a:	77 1f       	adc	r23, r23
     68c:	88 1f       	adc	r24, r24
     68e:	da f7       	brpl	.-10     	; 0x686 <__floatsisf+0x62>
     690:	88 0f       	add	r24, r24
     692:	96 95       	lsr	r25
     694:	87 95       	ror	r24
     696:	97 f9       	bld	r25, 7
     698:	08 95       	ret

0000069a <__fp_inf>:
     69a:	97 f9       	bld	r25, 7
     69c:	9f 67       	ori	r25, 0x7F	; 127
     69e:	80 e8       	ldi	r24, 0x80	; 128
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	08 95       	ret

000006a6 <__fp_nan>:
     6a6:	9f ef       	ldi	r25, 0xFF	; 255
     6a8:	80 ec       	ldi	r24, 0xC0	; 192
     6aa:	08 95       	ret

000006ac <__fp_pscA>:
     6ac:	00 24       	eor	r0, r0
     6ae:	0a 94       	dec	r0
     6b0:	16 16       	cp	r1, r22
     6b2:	17 06       	cpc	r1, r23
     6b4:	18 06       	cpc	r1, r24
     6b6:	09 06       	cpc	r0, r25
     6b8:	08 95       	ret

000006ba <__fp_pscB>:
     6ba:	00 24       	eor	r0, r0
     6bc:	0a 94       	dec	r0
     6be:	12 16       	cp	r1, r18
     6c0:	13 06       	cpc	r1, r19
     6c2:	14 06       	cpc	r1, r20
     6c4:	05 06       	cpc	r0, r21
     6c6:	08 95       	ret

000006c8 <__fp_round>:
     6c8:	09 2e       	mov	r0, r25
     6ca:	03 94       	inc	r0
     6cc:	00 0c       	add	r0, r0
     6ce:	11 f4       	brne	.+4      	; 0x6d4 <__fp_round+0xc>
     6d0:	88 23       	and	r24, r24
     6d2:	52 f0       	brmi	.+20     	; 0x6e8 <__fp_round+0x20>
     6d4:	bb 0f       	add	r27, r27
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__fp_round+0x20>
     6d8:	bf 2b       	or	r27, r31
     6da:	11 f4       	brne	.+4      	; 0x6e0 <__fp_round+0x18>
     6dc:	60 ff       	sbrs	r22, 0
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <__fp_round+0x20>
     6e0:	6f 5f       	subi	r22, 0xFF	; 255
     6e2:	7f 4f       	sbci	r23, 0xFF	; 255
     6e4:	8f 4f       	sbci	r24, 0xFF	; 255
     6e6:	9f 4f       	sbci	r25, 0xFF	; 255
     6e8:	08 95       	ret

000006ea <__fp_split3>:
     6ea:	57 fd       	sbrc	r21, 7
     6ec:	90 58       	subi	r25, 0x80	; 128
     6ee:	44 0f       	add	r20, r20
     6f0:	55 1f       	adc	r21, r21
     6f2:	59 f0       	breq	.+22     	; 0x70a <__fp_splitA+0x10>
     6f4:	5f 3f       	cpi	r21, 0xFF	; 255
     6f6:	71 f0       	breq	.+28     	; 0x714 <__fp_splitA+0x1a>
     6f8:	47 95       	ror	r20

000006fa <__fp_splitA>:
     6fa:	88 0f       	add	r24, r24
     6fc:	97 fb       	bst	r25, 7
     6fe:	99 1f       	adc	r25, r25
     700:	61 f0       	breq	.+24     	; 0x71a <__fp_splitA+0x20>
     702:	9f 3f       	cpi	r25, 0xFF	; 255
     704:	79 f0       	breq	.+30     	; 0x724 <__fp_splitA+0x2a>
     706:	87 95       	ror	r24
     708:	08 95       	ret
     70a:	12 16       	cp	r1, r18
     70c:	13 06       	cpc	r1, r19
     70e:	14 06       	cpc	r1, r20
     710:	55 1f       	adc	r21, r21
     712:	f2 cf       	rjmp	.-28     	; 0x6f8 <__fp_split3+0xe>
     714:	46 95       	lsr	r20
     716:	f1 df       	rcall	.-30     	; 0x6fa <__fp_splitA>
     718:	08 c0       	rjmp	.+16     	; 0x72a <__fp_splitA+0x30>
     71a:	16 16       	cp	r1, r22
     71c:	17 06       	cpc	r1, r23
     71e:	18 06       	cpc	r1, r24
     720:	99 1f       	adc	r25, r25
     722:	f1 cf       	rjmp	.-30     	; 0x706 <__fp_splitA+0xc>
     724:	86 95       	lsr	r24
     726:	71 05       	cpc	r23, r1
     728:	61 05       	cpc	r22, r1
     72a:	08 94       	sec
     72c:	08 95       	ret

0000072e <__fp_zero>:
     72e:	e8 94       	clt

00000730 <__fp_szero>:
     730:	bb 27       	eor	r27, r27
     732:	66 27       	eor	r22, r22
     734:	77 27       	eor	r23, r23
     736:	cb 01       	movw	r24, r22
     738:	97 f9       	bld	r25, 7
     73a:	08 95       	ret

0000073c <__mulsf3>:
     73c:	0b d0       	rcall	.+22     	; 0x754 <__mulsf3x>
     73e:	c4 cf       	rjmp	.-120    	; 0x6c8 <__fp_round>
     740:	b5 df       	rcall	.-150    	; 0x6ac <__fp_pscA>
     742:	28 f0       	brcs	.+10     	; 0x74e <__mulsf3+0x12>
     744:	ba df       	rcall	.-140    	; 0x6ba <__fp_pscB>
     746:	18 f0       	brcs	.+6      	; 0x74e <__mulsf3+0x12>
     748:	95 23       	and	r25, r21
     74a:	09 f0       	breq	.+2      	; 0x74e <__mulsf3+0x12>
     74c:	a6 cf       	rjmp	.-180    	; 0x69a <__fp_inf>
     74e:	ab cf       	rjmp	.-170    	; 0x6a6 <__fp_nan>
     750:	11 24       	eor	r1, r1
     752:	ee cf       	rjmp	.-36     	; 0x730 <__fp_szero>

00000754 <__mulsf3x>:
     754:	ca df       	rcall	.-108    	; 0x6ea <__fp_split3>
     756:	a0 f3       	brcs	.-24     	; 0x740 <__mulsf3+0x4>

00000758 <__mulsf3_pse>:
     758:	95 9f       	mul	r25, r21
     75a:	d1 f3       	breq	.-12     	; 0x750 <__mulsf3+0x14>
     75c:	95 0f       	add	r25, r21
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	55 1f       	adc	r21, r21
     762:	62 9f       	mul	r22, r18
     764:	f0 01       	movw	r30, r0
     766:	72 9f       	mul	r23, r18
     768:	bb 27       	eor	r27, r27
     76a:	f0 0d       	add	r31, r0
     76c:	b1 1d       	adc	r27, r1
     76e:	63 9f       	mul	r22, r19
     770:	aa 27       	eor	r26, r26
     772:	f0 0d       	add	r31, r0
     774:	b1 1d       	adc	r27, r1
     776:	aa 1f       	adc	r26, r26
     778:	64 9f       	mul	r22, r20
     77a:	66 27       	eor	r22, r22
     77c:	b0 0d       	add	r27, r0
     77e:	a1 1d       	adc	r26, r1
     780:	66 1f       	adc	r22, r22
     782:	82 9f       	mul	r24, r18
     784:	22 27       	eor	r18, r18
     786:	b0 0d       	add	r27, r0
     788:	a1 1d       	adc	r26, r1
     78a:	62 1f       	adc	r22, r18
     78c:	73 9f       	mul	r23, r19
     78e:	b0 0d       	add	r27, r0
     790:	a1 1d       	adc	r26, r1
     792:	62 1f       	adc	r22, r18
     794:	83 9f       	mul	r24, r19
     796:	a0 0d       	add	r26, r0
     798:	61 1d       	adc	r22, r1
     79a:	22 1f       	adc	r18, r18
     79c:	74 9f       	mul	r23, r20
     79e:	33 27       	eor	r19, r19
     7a0:	a0 0d       	add	r26, r0
     7a2:	61 1d       	adc	r22, r1
     7a4:	23 1f       	adc	r18, r19
     7a6:	84 9f       	mul	r24, r20
     7a8:	60 0d       	add	r22, r0
     7aa:	21 1d       	adc	r18, r1
     7ac:	82 2f       	mov	r24, r18
     7ae:	76 2f       	mov	r23, r22
     7b0:	6a 2f       	mov	r22, r26
     7b2:	11 24       	eor	r1, r1
     7b4:	9f 57       	subi	r25, 0x7F	; 127
     7b6:	50 40       	sbci	r21, 0x00	; 0
     7b8:	8a f0       	brmi	.+34     	; 0x7dc <__mulsf3_pse+0x84>
     7ba:	e1 f0       	breq	.+56     	; 0x7f4 <__mulsf3_pse+0x9c>
     7bc:	88 23       	and	r24, r24
     7be:	4a f0       	brmi	.+18     	; 0x7d2 <__mulsf3_pse+0x7a>
     7c0:	ee 0f       	add	r30, r30
     7c2:	ff 1f       	adc	r31, r31
     7c4:	bb 1f       	adc	r27, r27
     7c6:	66 1f       	adc	r22, r22
     7c8:	77 1f       	adc	r23, r23
     7ca:	88 1f       	adc	r24, r24
     7cc:	91 50       	subi	r25, 0x01	; 1
     7ce:	50 40       	sbci	r21, 0x00	; 0
     7d0:	a9 f7       	brne	.-22     	; 0x7bc <__mulsf3_pse+0x64>
     7d2:	9e 3f       	cpi	r25, 0xFE	; 254
     7d4:	51 05       	cpc	r21, r1
     7d6:	70 f0       	brcs	.+28     	; 0x7f4 <__mulsf3_pse+0x9c>
     7d8:	60 cf       	rjmp	.-320    	; 0x69a <__fp_inf>
     7da:	aa cf       	rjmp	.-172    	; 0x730 <__fp_szero>
     7dc:	5f 3f       	cpi	r21, 0xFF	; 255
     7de:	ec f3       	brlt	.-6      	; 0x7da <__mulsf3_pse+0x82>
     7e0:	98 3e       	cpi	r25, 0xE8	; 232
     7e2:	dc f3       	brlt	.-10     	; 0x7da <__mulsf3_pse+0x82>
     7e4:	86 95       	lsr	r24
     7e6:	77 95       	ror	r23
     7e8:	67 95       	ror	r22
     7ea:	b7 95       	ror	r27
     7ec:	f7 95       	ror	r31
     7ee:	e7 95       	ror	r30
     7f0:	9f 5f       	subi	r25, 0xFF	; 255
     7f2:	c1 f7       	brne	.-16     	; 0x7e4 <__mulsf3_pse+0x8c>
     7f4:	fe 2b       	or	r31, r30
     7f6:	88 0f       	add	r24, r24
     7f8:	91 1d       	adc	r25, r1
     7fa:	96 95       	lsr	r25
     7fc:	87 95       	ror	r24
     7fe:	97 f9       	bld	r25, 7
     800:	08 95       	ret

00000802 <sin>:
     802:	9f 93       	push	r25
     804:	05 d0       	rcall	.+10     	; 0x810 <__fp_rempio2>
     806:	0f 90       	pop	r0
     808:	07 fc       	sbrc	r0, 7
     80a:	ee 5f       	subi	r30, 0xFE	; 254
     80c:	28 c0       	rjmp	.+80     	; 0x85e <__fp_sinus>
     80e:	4b cf       	rjmp	.-362    	; 0x6a6 <__fp_nan>

00000810 <__fp_rempio2>:
     810:	74 df       	rcall	.-280    	; 0x6fa <__fp_splitA>
     812:	e8 f3       	brcs	.-6      	; 0x80e <sin+0xc>
     814:	e8 94       	clt
     816:	e0 e0       	ldi	r30, 0x00	; 0
     818:	bb 27       	eor	r27, r27
     81a:	9f 57       	subi	r25, 0x7F	; 127
     81c:	f0 f0       	brcs	.+60     	; 0x85a <__fp_rempio2+0x4a>
     81e:	2a ed       	ldi	r18, 0xDA	; 218
     820:	3f e0       	ldi	r19, 0x0F	; 15
     822:	49 ec       	ldi	r20, 0xC9	; 201
     824:	06 c0       	rjmp	.+12     	; 0x832 <__fp_rempio2+0x22>
     826:	ee 0f       	add	r30, r30
     828:	bb 0f       	add	r27, r27
     82a:	66 1f       	adc	r22, r22
     82c:	77 1f       	adc	r23, r23
     82e:	88 1f       	adc	r24, r24
     830:	28 f0       	brcs	.+10     	; 0x83c <__fp_rempio2+0x2c>
     832:	b2 3a       	cpi	r27, 0xA2	; 162
     834:	62 07       	cpc	r22, r18
     836:	73 07       	cpc	r23, r19
     838:	84 07       	cpc	r24, r20
     83a:	28 f0       	brcs	.+10     	; 0x846 <__fp_rempio2+0x36>
     83c:	b2 5a       	subi	r27, 0xA2	; 162
     83e:	62 0b       	sbc	r22, r18
     840:	73 0b       	sbc	r23, r19
     842:	84 0b       	sbc	r24, r20
     844:	e3 95       	inc	r30
     846:	9a 95       	dec	r25
     848:	72 f7       	brpl	.-36     	; 0x826 <__fp_rempio2+0x16>
     84a:	80 38       	cpi	r24, 0x80	; 128
     84c:	30 f4       	brcc	.+12     	; 0x85a <__fp_rempio2+0x4a>
     84e:	9a 95       	dec	r25
     850:	bb 0f       	add	r27, r27
     852:	66 1f       	adc	r22, r22
     854:	77 1f       	adc	r23, r23
     856:	88 1f       	adc	r24, r24
     858:	d2 f7       	brpl	.-12     	; 0x84e <__fp_rempio2+0x3e>
     85a:	90 48       	sbci	r25, 0x80	; 128
     85c:	73 c0       	rjmp	.+230    	; 0x944 <__fp_mpack_finite>

0000085e <__fp_sinus>:
     85e:	ef 93       	push	r30
     860:	e0 ff       	sbrs	r30, 0
     862:	06 c0       	rjmp	.+12     	; 0x870 <__fp_sinus+0x12>
     864:	a2 ea       	ldi	r26, 0xA2	; 162
     866:	2a ed       	ldi	r18, 0xDA	; 218
     868:	3f e0       	ldi	r19, 0x0F	; 15
     86a:	49 ec       	ldi	r20, 0xC9	; 201
     86c:	5f eb       	ldi	r21, 0xBF	; 191
     86e:	15 d0       	rcall	.+42     	; 0x89a <__addsf3x>
     870:	2b df       	rcall	.-426    	; 0x6c8 <__fp_round>
     872:	0f 90       	pop	r0
     874:	03 94       	inc	r0
     876:	01 fc       	sbrc	r0, 1
     878:	90 58       	subi	r25, 0x80	; 128
     87a:	e6 e2       	ldi	r30, 0x26	; 38
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	6e c0       	rjmp	.+220    	; 0x95c <__fp_powsodd>
     880:	15 df       	rcall	.-470    	; 0x6ac <__fp_pscA>
     882:	30 f0       	brcs	.+12     	; 0x890 <__fp_sinus+0x32>
     884:	1a df       	rcall	.-460    	; 0x6ba <__fp_pscB>
     886:	20 f0       	brcs	.+8      	; 0x890 <__fp_sinus+0x32>
     888:	31 f4       	brne	.+12     	; 0x896 <__fp_sinus+0x38>
     88a:	9f 3f       	cpi	r25, 0xFF	; 255
     88c:	11 f4       	brne	.+4      	; 0x892 <__fp_sinus+0x34>
     88e:	1e f4       	brtc	.+6      	; 0x896 <__fp_sinus+0x38>
     890:	0a cf       	rjmp	.-492    	; 0x6a6 <__fp_nan>
     892:	0e f4       	brtc	.+2      	; 0x896 <__fp_sinus+0x38>
     894:	e0 95       	com	r30
     896:	e7 fb       	bst	r30, 7
     898:	00 cf       	rjmp	.-512    	; 0x69a <__fp_inf>

0000089a <__addsf3x>:
     89a:	e9 2f       	mov	r30, r25
     89c:	26 df       	rcall	.-436    	; 0x6ea <__fp_split3>
     89e:	80 f3       	brcs	.-32     	; 0x880 <__fp_sinus+0x22>
     8a0:	ba 17       	cp	r27, r26
     8a2:	62 07       	cpc	r22, r18
     8a4:	73 07       	cpc	r23, r19
     8a6:	84 07       	cpc	r24, r20
     8a8:	95 07       	cpc	r25, r21
     8aa:	18 f0       	brcs	.+6      	; 0x8b2 <__addsf3x+0x18>
     8ac:	71 f4       	brne	.+28     	; 0x8ca <__addsf3x+0x30>
     8ae:	9e f5       	brtc	.+102    	; 0x916 <__addsf3x+0x7c>
     8b0:	3e cf       	rjmp	.-388    	; 0x72e <__fp_zero>
     8b2:	0e f4       	brtc	.+2      	; 0x8b6 <__addsf3x+0x1c>
     8b4:	e0 95       	com	r30
     8b6:	0b 2e       	mov	r0, r27
     8b8:	ba 2f       	mov	r27, r26
     8ba:	a0 2d       	mov	r26, r0
     8bc:	0b 01       	movw	r0, r22
     8be:	b9 01       	movw	r22, r18
     8c0:	90 01       	movw	r18, r0
     8c2:	0c 01       	movw	r0, r24
     8c4:	ca 01       	movw	r24, r20
     8c6:	a0 01       	movw	r20, r0
     8c8:	11 24       	eor	r1, r1
     8ca:	ff 27       	eor	r31, r31
     8cc:	59 1b       	sub	r21, r25
     8ce:	99 f0       	breq	.+38     	; 0x8f6 <__addsf3x+0x5c>
     8d0:	59 3f       	cpi	r21, 0xF9	; 249
     8d2:	50 f4       	brcc	.+20     	; 0x8e8 <__addsf3x+0x4e>
     8d4:	50 3e       	cpi	r21, 0xE0	; 224
     8d6:	68 f1       	brcs	.+90     	; 0x932 <__addsf3x+0x98>
     8d8:	1a 16       	cp	r1, r26
     8da:	f0 40       	sbci	r31, 0x00	; 0
     8dc:	a2 2f       	mov	r26, r18
     8de:	23 2f       	mov	r18, r19
     8e0:	34 2f       	mov	r19, r20
     8e2:	44 27       	eor	r20, r20
     8e4:	58 5f       	subi	r21, 0xF8	; 248
     8e6:	f3 cf       	rjmp	.-26     	; 0x8ce <__addsf3x+0x34>
     8e8:	46 95       	lsr	r20
     8ea:	37 95       	ror	r19
     8ec:	27 95       	ror	r18
     8ee:	a7 95       	ror	r26
     8f0:	f0 40       	sbci	r31, 0x00	; 0
     8f2:	53 95       	inc	r21
     8f4:	c9 f7       	brne	.-14     	; 0x8e8 <__addsf3x+0x4e>
     8f6:	7e f4       	brtc	.+30     	; 0x916 <__addsf3x+0x7c>
     8f8:	1f 16       	cp	r1, r31
     8fa:	ba 0b       	sbc	r27, r26
     8fc:	62 0b       	sbc	r22, r18
     8fe:	73 0b       	sbc	r23, r19
     900:	84 0b       	sbc	r24, r20
     902:	ba f0       	brmi	.+46     	; 0x932 <__addsf3x+0x98>
     904:	91 50       	subi	r25, 0x01	; 1
     906:	a1 f0       	breq	.+40     	; 0x930 <__addsf3x+0x96>
     908:	ff 0f       	add	r31, r31
     90a:	bb 1f       	adc	r27, r27
     90c:	66 1f       	adc	r22, r22
     90e:	77 1f       	adc	r23, r23
     910:	88 1f       	adc	r24, r24
     912:	c2 f7       	brpl	.-16     	; 0x904 <__addsf3x+0x6a>
     914:	0e c0       	rjmp	.+28     	; 0x932 <__addsf3x+0x98>
     916:	ba 0f       	add	r27, r26
     918:	62 1f       	adc	r22, r18
     91a:	73 1f       	adc	r23, r19
     91c:	84 1f       	adc	r24, r20
     91e:	48 f4       	brcc	.+18     	; 0x932 <__addsf3x+0x98>
     920:	87 95       	ror	r24
     922:	77 95       	ror	r23
     924:	67 95       	ror	r22
     926:	b7 95       	ror	r27
     928:	f7 95       	ror	r31
     92a:	9e 3f       	cpi	r25, 0xFE	; 254
     92c:	08 f0       	brcs	.+2      	; 0x930 <__addsf3x+0x96>
     92e:	b3 cf       	rjmp	.-154    	; 0x896 <__fp_sinus+0x38>
     930:	93 95       	inc	r25
     932:	88 0f       	add	r24, r24
     934:	08 f0       	brcs	.+2      	; 0x938 <__addsf3x+0x9e>
     936:	99 27       	eor	r25, r25
     938:	ee 0f       	add	r30, r30
     93a:	97 95       	ror	r25
     93c:	87 95       	ror	r24
     93e:	08 95       	ret

00000940 <__fp_mpack>:
     940:	9f 3f       	cpi	r25, 0xFF	; 255
     942:	31 f0       	breq	.+12     	; 0x950 <__fp_mpack_finite+0xc>

00000944 <__fp_mpack_finite>:
     944:	91 50       	subi	r25, 0x01	; 1
     946:	20 f4       	brcc	.+8      	; 0x950 <__fp_mpack_finite+0xc>
     948:	87 95       	ror	r24
     94a:	77 95       	ror	r23
     94c:	67 95       	ror	r22
     94e:	b7 95       	ror	r27
     950:	88 0f       	add	r24, r24
     952:	91 1d       	adc	r25, r1
     954:	96 95       	lsr	r25
     956:	87 95       	ror	r24
     958:	97 f9       	bld	r25, 7
     95a:	08 95       	ret

0000095c <__fp_powsodd>:
     95c:	9f 93       	push	r25
     95e:	8f 93       	push	r24
     960:	7f 93       	push	r23
     962:	6f 93       	push	r22
     964:	ff 93       	push	r31
     966:	ef 93       	push	r30
     968:	9b 01       	movw	r18, r22
     96a:	ac 01       	movw	r20, r24
     96c:	e7 de       	rcall	.-562    	; 0x73c <__mulsf3>
     96e:	ef 91       	pop	r30
     970:	ff 91       	pop	r31
     972:	05 d0       	rcall	.+10     	; 0x97e <__fp_powser>
     974:	2f 91       	pop	r18
     976:	3f 91       	pop	r19
     978:	4f 91       	pop	r20
     97a:	5f 91       	pop	r21
     97c:	df ce       	rjmp	.-578    	; 0x73c <__mulsf3>

0000097e <__fp_powser>:
     97e:	df 93       	push	r29
     980:	cf 93       	push	r28
     982:	1f 93       	push	r17
     984:	0f 93       	push	r16
     986:	ff 92       	push	r15
     988:	ef 92       	push	r14
     98a:	df 92       	push	r13
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	68 94       	set
     992:	05 c0       	rjmp	.+10     	; 0x99e <__fp_powser+0x20>
     994:	da 2e       	mov	r13, r26
     996:	ef 01       	movw	r28, r30
     998:	dd de       	rcall	.-582    	; 0x754 <__mulsf3x>
     99a:	fe 01       	movw	r30, r28
     99c:	e8 94       	clt
     99e:	a5 91       	lpm	r26, Z+
     9a0:	25 91       	lpm	r18, Z+
     9a2:	35 91       	lpm	r19, Z+
     9a4:	45 91       	lpm	r20, Z+
     9a6:	55 91       	lpm	r21, Z+
     9a8:	ae f3       	brts	.-22     	; 0x994 <__fp_powser+0x16>
     9aa:	ef 01       	movw	r28, r30
     9ac:	76 df       	rcall	.-276    	; 0x89a <__addsf3x>
     9ae:	fe 01       	movw	r30, r28
     9b0:	97 01       	movw	r18, r14
     9b2:	a8 01       	movw	r20, r16
     9b4:	da 94       	dec	r13
     9b6:	79 f7       	brne	.-34     	; 0x996 <__fp_powser+0x18>
     9b8:	df 90       	pop	r13
     9ba:	ef 90       	pop	r14
     9bc:	ff 90       	pop	r15
     9be:	0f 91       	pop	r16
     9c0:	1f 91       	pop	r17
     9c2:	cf 91       	pop	r28
     9c4:	df 91       	pop	r29
     9c6:	08 95       	ret

000009c8 <__divmodsi4>:
     9c8:	05 2e       	mov	r0, r21
     9ca:	97 fb       	bst	r25, 7
     9cc:	16 f4       	brtc	.+4      	; 0x9d2 <__divmodsi4+0xa>
     9ce:	00 94       	com	r0
     9d0:	0f d0       	rcall	.+30     	; 0x9f0 <__negsi2>
     9d2:	57 fd       	sbrc	r21, 7
     9d4:	05 d0       	rcall	.+10     	; 0x9e0 <__divmodsi4_neg2>
     9d6:	1e d0       	rcall	.+60     	; 0xa14 <__udivmodsi4>
     9d8:	07 fc       	sbrc	r0, 7
     9da:	02 d0       	rcall	.+4      	; 0x9e0 <__divmodsi4_neg2>
     9dc:	46 f4       	brtc	.+16     	; 0x9ee <__divmodsi4_exit>
     9de:	08 c0       	rjmp	.+16     	; 0x9f0 <__negsi2>

000009e0 <__divmodsi4_neg2>:
     9e0:	50 95       	com	r21
     9e2:	40 95       	com	r20
     9e4:	30 95       	com	r19
     9e6:	21 95       	neg	r18
     9e8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ea:	4f 4f       	sbci	r20, 0xFF	; 255
     9ec:	5f 4f       	sbci	r21, 0xFF	; 255

000009ee <__divmodsi4_exit>:
     9ee:	08 95       	ret

000009f0 <__negsi2>:
     9f0:	90 95       	com	r25
     9f2:	80 95       	com	r24
     9f4:	70 95       	com	r23
     9f6:	61 95       	neg	r22
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	8f 4f       	sbci	r24, 0xFF	; 255
     9fc:	9f 4f       	sbci	r25, 0xFF	; 255
     9fe:	08 95       	ret

00000a00 <__muluhisi3>:
     a00:	2b d0       	rcall	.+86     	; 0xa58 <__umulhisi3>
     a02:	a5 9f       	mul	r26, r21
     a04:	90 0d       	add	r25, r0
     a06:	b4 9f       	mul	r27, r20
     a08:	90 0d       	add	r25, r0
     a0a:	a4 9f       	mul	r26, r20
     a0c:	80 0d       	add	r24, r0
     a0e:	91 1d       	adc	r25, r1
     a10:	11 24       	eor	r1, r1
     a12:	08 95       	ret

00000a14 <__udivmodsi4>:
     a14:	a1 e2       	ldi	r26, 0x21	; 33
     a16:	1a 2e       	mov	r1, r26
     a18:	aa 1b       	sub	r26, r26
     a1a:	bb 1b       	sub	r27, r27
     a1c:	fd 01       	movw	r30, r26
     a1e:	0d c0       	rjmp	.+26     	; 0xa3a <__udivmodsi4_ep>

00000a20 <__udivmodsi4_loop>:
     a20:	aa 1f       	adc	r26, r26
     a22:	bb 1f       	adc	r27, r27
     a24:	ee 1f       	adc	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	a2 17       	cp	r26, r18
     a2a:	b3 07       	cpc	r27, r19
     a2c:	e4 07       	cpc	r30, r20
     a2e:	f5 07       	cpc	r31, r21
     a30:	20 f0       	brcs	.+8      	; 0xa3a <__udivmodsi4_ep>
     a32:	a2 1b       	sub	r26, r18
     a34:	b3 0b       	sbc	r27, r19
     a36:	e4 0b       	sbc	r30, r20
     a38:	f5 0b       	sbc	r31, r21

00000a3a <__udivmodsi4_ep>:
     a3a:	66 1f       	adc	r22, r22
     a3c:	77 1f       	adc	r23, r23
     a3e:	88 1f       	adc	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	1a 94       	dec	r1
     a44:	69 f7       	brne	.-38     	; 0xa20 <__udivmodsi4_loop>
     a46:	60 95       	com	r22
     a48:	70 95       	com	r23
     a4a:	80 95       	com	r24
     a4c:	90 95       	com	r25
     a4e:	9b 01       	movw	r18, r22
     a50:	ac 01       	movw	r20, r24
     a52:	bd 01       	movw	r22, r26
     a54:	cf 01       	movw	r24, r30
     a56:	08 95       	ret

00000a58 <__umulhisi3>:
     a58:	a2 9f       	mul	r26, r18
     a5a:	b0 01       	movw	r22, r0
     a5c:	b3 9f       	mul	r27, r19
     a5e:	c0 01       	movw	r24, r0
     a60:	a3 9f       	mul	r26, r19
     a62:	01 d0       	rcall	.+2      	; 0xa66 <__umulhisi3+0xe>
     a64:	b2 9f       	mul	r27, r18
     a66:	70 0d       	add	r23, r0
     a68:	81 1d       	adc	r24, r1
     a6a:	11 24       	eor	r1, r1
     a6c:	91 1d       	adc	r25, r1
     a6e:	08 95       	ret

00000a70 <calloc>:
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	86 9f       	mul	r24, r22
     a7a:	80 01       	movw	r16, r0
     a7c:	87 9f       	mul	r24, r23
     a7e:	10 0d       	add	r17, r0
     a80:	96 9f       	mul	r25, r22
     a82:	10 0d       	add	r17, r0
     a84:	11 24       	eor	r1, r1
     a86:	c8 01       	movw	r24, r16
     a88:	0d d0       	rcall	.+26     	; 0xaa4 <malloc>
     a8a:	ec 01       	movw	r28, r24
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	21 f0       	breq	.+8      	; 0xa98 <calloc+0x28>
     a90:	a8 01       	movw	r20, r16
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	ef d1       	rcall	.+990    	; 0xe76 <memset>
     a98:	ce 01       	movw	r24, r28
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret

00000aa4 <malloc>:
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	91 05       	cpc	r25, r1
     ab0:	10 f4       	brcc	.+4      	; 0xab6 <malloc+0x12>
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <__flp>
     aba:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <__flp+0x1>
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	30 97       	sbiw	r30, 0x00	; 0
     ac8:	19 f1       	breq	.+70     	; 0xb10 <malloc+0x6c>
     aca:	40 81       	ld	r20, Z
     acc:	51 81       	ldd	r21, Z+1	; 0x01
     ace:	02 81       	ldd	r16, Z+2	; 0x02
     ad0:	13 81       	ldd	r17, Z+3	; 0x03
     ad2:	48 17       	cp	r20, r24
     ad4:	59 07       	cpc	r21, r25
     ad6:	c8 f0       	brcs	.+50     	; 0xb0a <malloc+0x66>
     ad8:	84 17       	cp	r24, r20
     ada:	95 07       	cpc	r25, r21
     adc:	69 f4       	brne	.+26     	; 0xaf8 <malloc+0x54>
     ade:	10 97       	sbiw	r26, 0x00	; 0
     ae0:	31 f0       	breq	.+12     	; 0xaee <malloc+0x4a>
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	0c 93       	st	X, r16
     ae6:	12 97       	sbiw	r26, 0x02	; 2
     ae8:	13 96       	adiw	r26, 0x03	; 3
     aea:	1c 93       	st	X, r17
     aec:	27 c0       	rjmp	.+78     	; 0xb3c <malloc+0x98>
     aee:	00 93 b4 00 	sts	0x00B4, r16	; 0x8000b4 <__flp>
     af2:	10 93 b5 00 	sts	0x00B5, r17	; 0x8000b5 <__flp+0x1>
     af6:	22 c0       	rjmp	.+68     	; 0xb3c <malloc+0x98>
     af8:	21 15       	cp	r18, r1
     afa:	31 05       	cpc	r19, r1
     afc:	19 f0       	breq	.+6      	; 0xb04 <malloc+0x60>
     afe:	42 17       	cp	r20, r18
     b00:	53 07       	cpc	r21, r19
     b02:	18 f4       	brcc	.+6      	; 0xb0a <malloc+0x66>
     b04:	9a 01       	movw	r18, r20
     b06:	bd 01       	movw	r22, r26
     b08:	ef 01       	movw	r28, r30
     b0a:	df 01       	movw	r26, r30
     b0c:	f8 01       	movw	r30, r16
     b0e:	db cf       	rjmp	.-74     	; 0xac6 <malloc+0x22>
     b10:	21 15       	cp	r18, r1
     b12:	31 05       	cpc	r19, r1
     b14:	f9 f0       	breq	.+62     	; 0xb54 <malloc+0xb0>
     b16:	28 1b       	sub	r18, r24
     b18:	39 0b       	sbc	r19, r25
     b1a:	24 30       	cpi	r18, 0x04	; 4
     b1c:	31 05       	cpc	r19, r1
     b1e:	80 f4       	brcc	.+32     	; 0xb40 <malloc+0x9c>
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
     b22:	9b 81       	ldd	r25, Y+3	; 0x03
     b24:	61 15       	cp	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	21 f0       	breq	.+8      	; 0xb32 <malloc+0x8e>
     b2a:	fb 01       	movw	r30, r22
     b2c:	93 83       	std	Z+3, r25	; 0x03
     b2e:	82 83       	std	Z+2, r24	; 0x02
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <malloc+0x96>
     b32:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <__flp+0x1>
     b36:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__flp>
     b3a:	fe 01       	movw	r30, r28
     b3c:	32 96       	adiw	r30, 0x02	; 2
     b3e:	44 c0       	rjmp	.+136    	; 0xbc8 <malloc+0x124>
     b40:	fe 01       	movw	r30, r28
     b42:	e2 0f       	add	r30, r18
     b44:	f3 1f       	adc	r31, r19
     b46:	81 93       	st	Z+, r24
     b48:	91 93       	st	Z+, r25
     b4a:	22 50       	subi	r18, 0x02	; 2
     b4c:	31 09       	sbc	r19, r1
     b4e:	39 83       	std	Y+1, r19	; 0x01
     b50:	28 83       	st	Y, r18
     b52:	3a c0       	rjmp	.+116    	; 0xbc8 <malloc+0x124>
     b54:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <__brkval>
     b58:	30 91 b3 00 	lds	r19, 0x00B3	; 0x8000b3 <__brkval+0x1>
     b5c:	23 2b       	or	r18, r19
     b5e:	41 f4       	brne	.+16     	; 0xb70 <malloc+0xcc>
     b60:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
     b64:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
     b68:	30 93 b3 00 	sts	0x00B3, r19	; 0x8000b3 <__brkval+0x1>
     b6c:	20 93 b2 00 	sts	0x00B2, r18	; 0x8000b2 <__brkval>
     b70:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b74:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     b78:	21 15       	cp	r18, r1
     b7a:	31 05       	cpc	r19, r1
     b7c:	41 f4       	brne	.+16     	; 0xb8e <malloc+0xea>
     b7e:	2d b7       	in	r18, 0x3d	; 61
     b80:	3e b7       	in	r19, 0x3e	; 62
     b82:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
     b86:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
     b8a:	24 1b       	sub	r18, r20
     b8c:	35 0b       	sbc	r19, r21
     b8e:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <__brkval>
     b92:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <__brkval+0x1>
     b96:	e2 17       	cp	r30, r18
     b98:	f3 07       	cpc	r31, r19
     b9a:	a0 f4       	brcc	.+40     	; 0xbc4 <malloc+0x120>
     b9c:	2e 1b       	sub	r18, r30
     b9e:	3f 0b       	sbc	r19, r31
     ba0:	28 17       	cp	r18, r24
     ba2:	39 07       	cpc	r19, r25
     ba4:	78 f0       	brcs	.+30     	; 0xbc4 <malloc+0x120>
     ba6:	ac 01       	movw	r20, r24
     ba8:	4e 5f       	subi	r20, 0xFE	; 254
     baa:	5f 4f       	sbci	r21, 0xFF	; 255
     bac:	24 17       	cp	r18, r20
     bae:	35 07       	cpc	r19, r21
     bb0:	48 f0       	brcs	.+18     	; 0xbc4 <malloc+0x120>
     bb2:	4e 0f       	add	r20, r30
     bb4:	5f 1f       	adc	r21, r31
     bb6:	50 93 b3 00 	sts	0x00B3, r21	; 0x8000b3 <__brkval+0x1>
     bba:	40 93 b2 00 	sts	0x00B2, r20	; 0x8000b2 <__brkval>
     bbe:	81 93       	st	Z+, r24
     bc0:	91 93       	st	Z+, r25
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <malloc+0x124>
     bc4:	e0 e0       	ldi	r30, 0x00	; 0
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	cf 01       	movw	r24, r30
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	08 95       	ret

00000bd4 <free>:
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	09 f4       	brne	.+2      	; 0xbde <free+0xa>
     bdc:	81 c0       	rjmp	.+258    	; 0xce0 <free+0x10c>
     bde:	fc 01       	movw	r30, r24
     be0:	32 97       	sbiw	r30, 0x02	; 2
     be2:	13 82       	std	Z+3, r1	; 0x03
     be4:	12 82       	std	Z+2, r1	; 0x02
     be6:	a0 91 b4 00 	lds	r26, 0x00B4	; 0x8000b4 <__flp>
     bea:	b0 91 b5 00 	lds	r27, 0x00B5	; 0x8000b5 <__flp+0x1>
     bee:	10 97       	sbiw	r26, 0x00	; 0
     bf0:	81 f4       	brne	.+32     	; 0xc12 <free+0x3e>
     bf2:	20 81       	ld	r18, Z
     bf4:	31 81       	ldd	r19, Z+1	; 0x01
     bf6:	82 0f       	add	r24, r18
     bf8:	93 1f       	adc	r25, r19
     bfa:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <__brkval>
     bfe:	30 91 b3 00 	lds	r19, 0x00B3	; 0x8000b3 <__brkval+0x1>
     c02:	28 17       	cp	r18, r24
     c04:	39 07       	cpc	r19, r25
     c06:	51 f5       	brne	.+84     	; 0xc5c <free+0x88>
     c08:	f0 93 b3 00 	sts	0x00B3, r31	; 0x8000b3 <__brkval+0x1>
     c0c:	e0 93 b2 00 	sts	0x00B2, r30	; 0x8000b2 <__brkval>
     c10:	67 c0       	rjmp	.+206    	; 0xce0 <free+0x10c>
     c12:	ed 01       	movw	r28, r26
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	ce 17       	cp	r28, r30
     c1a:	df 07       	cpc	r29, r31
     c1c:	40 f4       	brcc	.+16     	; 0xc2e <free+0x5a>
     c1e:	4a 81       	ldd	r20, Y+2	; 0x02
     c20:	5b 81       	ldd	r21, Y+3	; 0x03
     c22:	9e 01       	movw	r18, r28
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	f1 f0       	breq	.+60     	; 0xc66 <free+0x92>
     c2a:	ea 01       	movw	r28, r20
     c2c:	f5 cf       	rjmp	.-22     	; 0xc18 <free+0x44>
     c2e:	d3 83       	std	Z+3, r29	; 0x03
     c30:	c2 83       	std	Z+2, r28	; 0x02
     c32:	40 81       	ld	r20, Z
     c34:	51 81       	ldd	r21, Z+1	; 0x01
     c36:	84 0f       	add	r24, r20
     c38:	95 1f       	adc	r25, r21
     c3a:	c8 17       	cp	r28, r24
     c3c:	d9 07       	cpc	r29, r25
     c3e:	59 f4       	brne	.+22     	; 0xc56 <free+0x82>
     c40:	88 81       	ld	r24, Y
     c42:	99 81       	ldd	r25, Y+1	; 0x01
     c44:	84 0f       	add	r24, r20
     c46:	95 1f       	adc	r25, r21
     c48:	02 96       	adiw	r24, 0x02	; 2
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	80 83       	st	Z, r24
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	9b 81       	ldd	r25, Y+3	; 0x03
     c52:	93 83       	std	Z+3, r25	; 0x03
     c54:	82 83       	std	Z+2, r24	; 0x02
     c56:	21 15       	cp	r18, r1
     c58:	31 05       	cpc	r19, r1
     c5a:	29 f4       	brne	.+10     	; 0xc66 <free+0x92>
     c5c:	f0 93 b5 00 	sts	0x00B5, r31	; 0x8000b5 <__flp+0x1>
     c60:	e0 93 b4 00 	sts	0x00B4, r30	; 0x8000b4 <__flp>
     c64:	3d c0       	rjmp	.+122    	; 0xce0 <free+0x10c>
     c66:	e9 01       	movw	r28, r18
     c68:	fb 83       	std	Y+3, r31	; 0x03
     c6a:	ea 83       	std	Y+2, r30	; 0x02
     c6c:	49 91       	ld	r20, Y+
     c6e:	59 91       	ld	r21, Y+
     c70:	c4 0f       	add	r28, r20
     c72:	d5 1f       	adc	r29, r21
     c74:	ec 17       	cp	r30, r28
     c76:	fd 07       	cpc	r31, r29
     c78:	61 f4       	brne	.+24     	; 0xc92 <free+0xbe>
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	84 0f       	add	r24, r20
     c80:	95 1f       	adc	r25, r21
     c82:	02 96       	adiw	r24, 0x02	; 2
     c84:	e9 01       	movw	r28, r18
     c86:	99 83       	std	Y+1, r25	; 0x01
     c88:	88 83       	st	Y, r24
     c8a:	82 81       	ldd	r24, Z+2	; 0x02
     c8c:	93 81       	ldd	r25, Z+3	; 0x03
     c8e:	9b 83       	std	Y+3, r25	; 0x03
     c90:	8a 83       	std	Y+2, r24	; 0x02
     c92:	e0 e0       	ldi	r30, 0x00	; 0
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	12 96       	adiw	r26, 0x02	; 2
     c98:	8d 91       	ld	r24, X+
     c9a:	9c 91       	ld	r25, X
     c9c:	13 97       	sbiw	r26, 0x03	; 3
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	19 f0       	breq	.+6      	; 0xca8 <free+0xd4>
     ca2:	fd 01       	movw	r30, r26
     ca4:	dc 01       	movw	r26, r24
     ca6:	f7 cf       	rjmp	.-18     	; 0xc96 <free+0xc2>
     ca8:	8d 91       	ld	r24, X+
     caa:	9c 91       	ld	r25, X
     cac:	11 97       	sbiw	r26, 0x01	; 1
     cae:	9d 01       	movw	r18, r26
     cb0:	2e 5f       	subi	r18, 0xFE	; 254
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	82 0f       	add	r24, r18
     cb6:	93 1f       	adc	r25, r19
     cb8:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <__brkval>
     cbc:	30 91 b3 00 	lds	r19, 0x00B3	; 0x8000b3 <__brkval+0x1>
     cc0:	28 17       	cp	r18, r24
     cc2:	39 07       	cpc	r19, r25
     cc4:	69 f4       	brne	.+26     	; 0xce0 <free+0x10c>
     cc6:	30 97       	sbiw	r30, 0x00	; 0
     cc8:	29 f4       	brne	.+10     	; 0xcd4 <free+0x100>
     cca:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <__flp+0x1>
     cce:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__flp>
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <free+0x104>
     cd4:	13 82       	std	Z+3, r1	; 0x03
     cd6:	12 82       	std	Z+2, r1	; 0x02
     cd8:	b0 93 b3 00 	sts	0x00B3, r27	; 0x8000b3 <__brkval+0x1>
     cdc:	a0 93 b2 00 	sts	0x00B2, r26	; 0x8000b2 <__brkval>
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	08 95       	ret

00000ce6 <realloc>:
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 e7       	ldi	r30, 0x78	; 120
     cec:	f6 e0       	ldi	r31, 0x06	; 6
     cee:	63 c3       	rjmp	.+1734   	; 0x13b6 <__prologue_saves__+0x8>
     cf0:	ec 01       	movw	r28, r24
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	19 f4       	brne	.+6      	; 0xcfc <realloc+0x16>
     cf6:	cb 01       	movw	r24, r22
     cf8:	d5 de       	rcall	.-598    	; 0xaa4 <malloc>
     cfa:	b0 c0       	rjmp	.+352    	; 0xe5c <realloc+0x176>
     cfc:	fc 01       	movw	r30, r24
     cfe:	e6 0f       	add	r30, r22
     d00:	f7 1f       	adc	r31, r23
     d02:	9c 01       	movw	r18, r24
     d04:	22 50       	subi	r18, 0x02	; 2
     d06:	31 09       	sbc	r19, r1
     d08:	e2 17       	cp	r30, r18
     d0a:	f3 07       	cpc	r31, r19
     d0c:	08 f4       	brcc	.+2      	; 0xd10 <realloc+0x2a>
     d0e:	a4 c0       	rjmp	.+328    	; 0xe58 <realloc+0x172>
     d10:	d9 01       	movw	r26, r18
     d12:	0d 91       	ld	r16, X+
     d14:	1c 91       	ld	r17, X
     d16:	11 97       	sbiw	r26, 0x01	; 1
     d18:	06 17       	cp	r16, r22
     d1a:	17 07       	cpc	r17, r23
     d1c:	a8 f0       	brcs	.+42     	; 0xd48 <realloc+0x62>
     d1e:	05 30       	cpi	r16, 0x05	; 5
     d20:	11 05       	cpc	r17, r1
     d22:	08 f4       	brcc	.+2      	; 0xd26 <realloc+0x40>
     d24:	97 c0       	rjmp	.+302    	; 0xe54 <realloc+0x16e>
     d26:	c8 01       	movw	r24, r16
     d28:	04 97       	sbiw	r24, 0x04	; 4
     d2a:	86 17       	cp	r24, r22
     d2c:	97 07       	cpc	r25, r23
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <realloc+0x4c>
     d30:	91 c0       	rjmp	.+290    	; 0xe54 <realloc+0x16e>
     d32:	02 50       	subi	r16, 0x02	; 2
     d34:	11 09       	sbc	r17, r1
     d36:	06 1b       	sub	r16, r22
     d38:	17 0b       	sbc	r17, r23
     d3a:	01 93       	st	Z+, r16
     d3c:	11 93       	st	Z+, r17
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	cf 01       	movw	r24, r30
     d44:	47 df       	rcall	.-370    	; 0xbd4 <free>
     d46:	86 c0       	rjmp	.+268    	; 0xe54 <realloc+0x16e>
     d48:	5b 01       	movw	r10, r22
     d4a:	a0 1a       	sub	r10, r16
     d4c:	b1 0a       	sbc	r11, r17
     d4e:	4c 01       	movw	r8, r24
     d50:	80 0e       	add	r8, r16
     d52:	91 1e       	adc	r9, r17
     d54:	a0 91 b4 00 	lds	r26, 0x00B4	; 0x8000b4 <__flp>
     d58:	b0 91 b5 00 	lds	r27, 0x00B5	; 0x8000b5 <__flp+0x1>
     d5c:	61 2c       	mov	r6, r1
     d5e:	71 2c       	mov	r7, r1
     d60:	e1 2c       	mov	r14, r1
     d62:	f1 2c       	mov	r15, r1
     d64:	10 97       	sbiw	r26, 0x00	; 0
     d66:	09 f4       	brne	.+2      	; 0xd6a <realloc+0x84>
     d68:	46 c0       	rjmp	.+140    	; 0xdf6 <realloc+0x110>
     d6a:	8d 91       	ld	r24, X+
     d6c:	9c 91       	ld	r25, X
     d6e:	11 97       	sbiw	r26, 0x01	; 1
     d70:	a8 15       	cp	r26, r8
     d72:	b9 05       	cpc	r27, r9
     d74:	b1 f5       	brne	.+108    	; 0xde2 <realloc+0xfc>
     d76:	6c 01       	movw	r12, r24
     d78:	42 e0       	ldi	r20, 0x02	; 2
     d7a:	c4 0e       	add	r12, r20
     d7c:	d1 1c       	adc	r13, r1
     d7e:	ca 14       	cp	r12, r10
     d80:	db 04       	cpc	r13, r11
     d82:	78 f1       	brcs	.+94     	; 0xde2 <realloc+0xfc>
     d84:	4c 01       	movw	r8, r24
     d86:	8a 18       	sub	r8, r10
     d88:	9b 08       	sbc	r9, r11
     d8a:	64 01       	movw	r12, r8
     d8c:	42 e0       	ldi	r20, 0x02	; 2
     d8e:	c4 0e       	add	r12, r20
     d90:	d1 1c       	adc	r13, r1
     d92:	12 96       	adiw	r26, 0x02	; 2
     d94:	bc 90       	ld	r11, X
     d96:	12 97       	sbiw	r26, 0x02	; 2
     d98:	13 96       	adiw	r26, 0x03	; 3
     d9a:	ac 91       	ld	r26, X
     d9c:	b5 e0       	ldi	r27, 0x05	; 5
     d9e:	cb 16       	cp	r12, r27
     da0:	d1 04       	cpc	r13, r1
     da2:	40 f0       	brcs	.+16     	; 0xdb4 <realloc+0xce>
     da4:	b2 82       	std	Z+2, r11	; 0x02
     da6:	a3 83       	std	Z+3, r26	; 0x03
     da8:	91 82       	std	Z+1, r9	; 0x01
     daa:	80 82       	st	Z, r8
     dac:	d9 01       	movw	r26, r18
     dae:	6d 93       	st	X+, r22
     db0:	7c 93       	st	X, r23
     db2:	09 c0       	rjmp	.+18     	; 0xdc6 <realloc+0xe0>
     db4:	0e 5f       	subi	r16, 0xFE	; 254
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	80 0f       	add	r24, r16
     dba:	91 1f       	adc	r25, r17
     dbc:	f9 01       	movw	r30, r18
     dbe:	91 83       	std	Z+1, r25	; 0x01
     dc0:	80 83       	st	Z, r24
     dc2:	eb 2d       	mov	r30, r11
     dc4:	fa 2f       	mov	r31, r26
     dc6:	e1 14       	cp	r14, r1
     dc8:	f1 04       	cpc	r15, r1
     dca:	31 f0       	breq	.+12     	; 0xdd8 <realloc+0xf2>
     dcc:	d7 01       	movw	r26, r14
     dce:	13 96       	adiw	r26, 0x03	; 3
     dd0:	fc 93       	st	X, r31
     dd2:	ee 93       	st	-X, r30
     dd4:	12 97       	sbiw	r26, 0x02	; 2
     dd6:	3e c0       	rjmp	.+124    	; 0xe54 <realloc+0x16e>
     dd8:	f0 93 b5 00 	sts	0x00B5, r31	; 0x8000b5 <__flp+0x1>
     ddc:	e0 93 b4 00 	sts	0x00B4, r30	; 0x8000b4 <__flp>
     de0:	39 c0       	rjmp	.+114    	; 0xe54 <realloc+0x16e>
     de2:	68 16       	cp	r6, r24
     de4:	79 06       	cpc	r7, r25
     de6:	08 f4       	brcc	.+2      	; 0xdea <realloc+0x104>
     de8:	3c 01       	movw	r6, r24
     dea:	7d 01       	movw	r14, r26
     dec:	12 96       	adiw	r26, 0x02	; 2
     dee:	0d 90       	ld	r0, X+
     df0:	bc 91       	ld	r27, X
     df2:	a0 2d       	mov	r26, r0
     df4:	b7 cf       	rjmp	.-146    	; 0xd64 <realloc+0x7e>
     df6:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__brkval>
     dfa:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <__brkval+0x1>
     dfe:	88 16       	cp	r8, r24
     e00:	99 06       	cpc	r9, r25
     e02:	e1 f4       	brne	.+56     	; 0xe3c <realloc+0x156>
     e04:	66 16       	cp	r6, r22
     e06:	77 06       	cpc	r7, r23
     e08:	c8 f4       	brcc	.+50     	; 0xe3c <realloc+0x156>
     e0a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     e0e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	41 f4       	brne	.+16     	; 0xe26 <realloc+0x140>
     e16:	8d b7       	in	r24, 0x3d	; 61
     e18:	9e b7       	in	r25, 0x3e	; 62
     e1a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
     e1e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
     e22:	84 1b       	sub	r24, r20
     e24:	95 0b       	sbc	r25, r21
     e26:	e8 17       	cp	r30, r24
     e28:	f9 07       	cpc	r31, r25
     e2a:	b0 f4       	brcc	.+44     	; 0xe58 <realloc+0x172>
     e2c:	f0 93 b3 00 	sts	0x00B3, r31	; 0x8000b3 <__brkval+0x1>
     e30:	e0 93 b2 00 	sts	0x00B2, r30	; 0x8000b2 <__brkval>
     e34:	f9 01       	movw	r30, r18
     e36:	71 83       	std	Z+1, r23	; 0x01
     e38:	60 83       	st	Z, r22
     e3a:	0c c0       	rjmp	.+24     	; 0xe54 <realloc+0x16e>
     e3c:	cb 01       	movw	r24, r22
     e3e:	32 de       	rcall	.-924    	; 0xaa4 <malloc>
     e40:	7c 01       	movw	r14, r24
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	49 f0       	breq	.+18     	; 0xe58 <realloc+0x172>
     e46:	a8 01       	movw	r20, r16
     e48:	be 01       	movw	r22, r28
     e4a:	0c d0       	rcall	.+24     	; 0xe64 <memcpy>
     e4c:	ce 01       	movw	r24, r28
     e4e:	c2 de       	rcall	.-636    	; 0xbd4 <free>
     e50:	c7 01       	movw	r24, r14
     e52:	04 c0       	rjmp	.+8      	; 0xe5c <realloc+0x176>
     e54:	ce 01       	movw	r24, r28
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <realloc+0x176>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	ee e0       	ldi	r30, 0x0E	; 14
     e62:	c5 c2       	rjmp	.+1418   	; 0x13ee <__epilogue_restores__+0x8>

00000e64 <memcpy>:
     e64:	fb 01       	movw	r30, r22
     e66:	dc 01       	movw	r26, r24
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <memcpy+0xa>
     e6a:	01 90       	ld	r0, Z+
     e6c:	0d 92       	st	X+, r0
     e6e:	41 50       	subi	r20, 0x01	; 1
     e70:	50 40       	sbci	r21, 0x00	; 0
     e72:	d8 f7       	brcc	.-10     	; 0xe6a <memcpy+0x6>
     e74:	08 95       	ret

00000e76 <memset>:
     e76:	dc 01       	movw	r26, r24
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <memset+0x6>
     e7a:	6d 93       	st	X+, r22
     e7c:	41 50       	subi	r20, 0x01	; 1
     e7e:	50 40       	sbci	r21, 0x00	; 0
     e80:	e0 f7       	brcc	.-8      	; 0xe7a <memset+0x4>
     e82:	08 95       	ret

00000e84 <printf>:
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e7 e4       	ldi	r30, 0x47	; 71
     e8a:	f7 e0       	ldi	r31, 0x07	; 7
     e8c:	a0 c2       	rjmp	.+1344   	; 0x13ce <__prologue_saves__+0x20>
     e8e:	ae 01       	movw	r20, r28
     e90:	4b 5f       	subi	r20, 0xFB	; 251
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
     e94:	fa 01       	movw	r30, r20
     e96:	61 91       	ld	r22, Z+
     e98:	71 91       	ld	r23, Z+
     e9a:	af 01       	movw	r20, r30
     e9c:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__iob+0x2>
     ea0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__iob+0x3>
     ea4:	02 d0       	rcall	.+4      	; 0xeaa <vfprintf>
     ea6:	e2 e0       	ldi	r30, 0x02	; 2
     ea8:	ae c2       	rjmp	.+1372   	; 0x1406 <__epilogue_restores__+0x20>

00000eaa <vfprintf>:
     eaa:	ab e0       	ldi	r26, 0x0B	; 11
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ea e5       	ldi	r30, 0x5A	; 90
     eb0:	f7 e0       	ldi	r31, 0x07	; 7
     eb2:	7d c2       	rjmp	.+1274   	; 0x13ae <__prologue_saves__>
     eb4:	6c 01       	movw	r12, r24
     eb6:	7b 01       	movw	r14, r22
     eb8:	8a 01       	movw	r16, r20
     eba:	fc 01       	movw	r30, r24
     ebc:	17 82       	std	Z+7, r1	; 0x07
     ebe:	16 82       	std	Z+6, r1	; 0x06
     ec0:	83 81       	ldd	r24, Z+3	; 0x03
     ec2:	81 ff       	sbrs	r24, 1
     ec4:	bf c1       	rjmp	.+894    	; 0x1244 <vfprintf+0x39a>
     ec6:	ce 01       	movw	r24, r28
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	3c 01       	movw	r6, r24
     ecc:	f6 01       	movw	r30, r12
     ece:	93 81       	ldd	r25, Z+3	; 0x03
     ed0:	f7 01       	movw	r30, r14
     ed2:	93 fd       	sbrc	r25, 3
     ed4:	85 91       	lpm	r24, Z+
     ed6:	93 ff       	sbrs	r25, 3
     ed8:	81 91       	ld	r24, Z+
     eda:	7f 01       	movw	r14, r30
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <vfprintf+0x38>
     ee0:	ad c1       	rjmp	.+858    	; 0x123c <vfprintf+0x392>
     ee2:	85 32       	cpi	r24, 0x25	; 37
     ee4:	39 f4       	brne	.+14     	; 0xef4 <vfprintf+0x4a>
     ee6:	93 fd       	sbrc	r25, 3
     ee8:	85 91       	lpm	r24, Z+
     eea:	93 ff       	sbrs	r25, 3
     eec:	81 91       	ld	r24, Z+
     eee:	7f 01       	movw	r14, r30
     ef0:	85 32       	cpi	r24, 0x25	; 37
     ef2:	21 f4       	brne	.+8      	; 0xefc <vfprintf+0x52>
     ef4:	b6 01       	movw	r22, r12
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	c0 d1       	rcall	.+896    	; 0x127a <fputc>
     efa:	e8 cf       	rjmp	.-48     	; 0xecc <vfprintf+0x22>
     efc:	91 2c       	mov	r9, r1
     efe:	21 2c       	mov	r2, r1
     f00:	31 2c       	mov	r3, r1
     f02:	ff e1       	ldi	r31, 0x1F	; 31
     f04:	f3 15       	cp	r31, r3
     f06:	d8 f0       	brcs	.+54     	; 0xf3e <vfprintf+0x94>
     f08:	8b 32       	cpi	r24, 0x2B	; 43
     f0a:	79 f0       	breq	.+30     	; 0xf2a <vfprintf+0x80>
     f0c:	38 f4       	brcc	.+14     	; 0xf1c <vfprintf+0x72>
     f0e:	80 32       	cpi	r24, 0x20	; 32
     f10:	79 f0       	breq	.+30     	; 0xf30 <vfprintf+0x86>
     f12:	83 32       	cpi	r24, 0x23	; 35
     f14:	a1 f4       	brne	.+40     	; 0xf3e <vfprintf+0x94>
     f16:	23 2d       	mov	r18, r3
     f18:	20 61       	ori	r18, 0x10	; 16
     f1a:	1d c0       	rjmp	.+58     	; 0xf56 <vfprintf+0xac>
     f1c:	8d 32       	cpi	r24, 0x2D	; 45
     f1e:	61 f0       	breq	.+24     	; 0xf38 <vfprintf+0x8e>
     f20:	80 33       	cpi	r24, 0x30	; 48
     f22:	69 f4       	brne	.+26     	; 0xf3e <vfprintf+0x94>
     f24:	23 2d       	mov	r18, r3
     f26:	21 60       	ori	r18, 0x01	; 1
     f28:	16 c0       	rjmp	.+44     	; 0xf56 <vfprintf+0xac>
     f2a:	83 2d       	mov	r24, r3
     f2c:	82 60       	ori	r24, 0x02	; 2
     f2e:	38 2e       	mov	r3, r24
     f30:	e3 2d       	mov	r30, r3
     f32:	e4 60       	ori	r30, 0x04	; 4
     f34:	3e 2e       	mov	r3, r30
     f36:	2a c0       	rjmp	.+84     	; 0xf8c <vfprintf+0xe2>
     f38:	f3 2d       	mov	r31, r3
     f3a:	f8 60       	ori	r31, 0x08	; 8
     f3c:	1d c0       	rjmp	.+58     	; 0xf78 <vfprintf+0xce>
     f3e:	37 fc       	sbrc	r3, 7
     f40:	2d c0       	rjmp	.+90     	; 0xf9c <vfprintf+0xf2>
     f42:	20 ed       	ldi	r18, 0xD0	; 208
     f44:	28 0f       	add	r18, r24
     f46:	2a 30       	cpi	r18, 0x0A	; 10
     f48:	40 f0       	brcs	.+16     	; 0xf5a <vfprintf+0xb0>
     f4a:	8e 32       	cpi	r24, 0x2E	; 46
     f4c:	b9 f4       	brne	.+46     	; 0xf7c <vfprintf+0xd2>
     f4e:	36 fc       	sbrc	r3, 6
     f50:	75 c1       	rjmp	.+746    	; 0x123c <vfprintf+0x392>
     f52:	23 2d       	mov	r18, r3
     f54:	20 64       	ori	r18, 0x40	; 64
     f56:	32 2e       	mov	r3, r18
     f58:	19 c0       	rjmp	.+50     	; 0xf8c <vfprintf+0xe2>
     f5a:	36 fe       	sbrs	r3, 6
     f5c:	06 c0       	rjmp	.+12     	; 0xf6a <vfprintf+0xc0>
     f5e:	8a e0       	ldi	r24, 0x0A	; 10
     f60:	98 9e       	mul	r9, r24
     f62:	20 0d       	add	r18, r0
     f64:	11 24       	eor	r1, r1
     f66:	92 2e       	mov	r9, r18
     f68:	11 c0       	rjmp	.+34     	; 0xf8c <vfprintf+0xe2>
     f6a:	ea e0       	ldi	r30, 0x0A	; 10
     f6c:	2e 9e       	mul	r2, r30
     f6e:	20 0d       	add	r18, r0
     f70:	11 24       	eor	r1, r1
     f72:	22 2e       	mov	r2, r18
     f74:	f3 2d       	mov	r31, r3
     f76:	f0 62       	ori	r31, 0x20	; 32
     f78:	3f 2e       	mov	r3, r31
     f7a:	08 c0       	rjmp	.+16     	; 0xf8c <vfprintf+0xe2>
     f7c:	8c 36       	cpi	r24, 0x6C	; 108
     f7e:	21 f4       	brne	.+8      	; 0xf88 <vfprintf+0xde>
     f80:	83 2d       	mov	r24, r3
     f82:	80 68       	ori	r24, 0x80	; 128
     f84:	38 2e       	mov	r3, r24
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <vfprintf+0xe2>
     f88:	88 36       	cpi	r24, 0x68	; 104
     f8a:	41 f4       	brne	.+16     	; 0xf9c <vfprintf+0xf2>
     f8c:	f7 01       	movw	r30, r14
     f8e:	93 fd       	sbrc	r25, 3
     f90:	85 91       	lpm	r24, Z+
     f92:	93 ff       	sbrs	r25, 3
     f94:	81 91       	ld	r24, Z+
     f96:	7f 01       	movw	r14, r30
     f98:	81 11       	cpse	r24, r1
     f9a:	b3 cf       	rjmp	.-154    	; 0xf02 <vfprintf+0x58>
     f9c:	98 2f       	mov	r25, r24
     f9e:	9f 7d       	andi	r25, 0xDF	; 223
     fa0:	95 54       	subi	r25, 0x45	; 69
     fa2:	93 30       	cpi	r25, 0x03	; 3
     fa4:	28 f4       	brcc	.+10     	; 0xfb0 <vfprintf+0x106>
     fa6:	0c 5f       	subi	r16, 0xFC	; 252
     fa8:	1f 4f       	sbci	r17, 0xFF	; 255
     faa:	9f e3       	ldi	r25, 0x3F	; 63
     fac:	99 83       	std	Y+1, r25	; 0x01
     fae:	0d c0       	rjmp	.+26     	; 0xfca <vfprintf+0x120>
     fb0:	83 36       	cpi	r24, 0x63	; 99
     fb2:	31 f0       	breq	.+12     	; 0xfc0 <vfprintf+0x116>
     fb4:	83 37       	cpi	r24, 0x73	; 115
     fb6:	71 f0       	breq	.+28     	; 0xfd4 <vfprintf+0x12a>
     fb8:	83 35       	cpi	r24, 0x53	; 83
     fba:	09 f0       	breq	.+2      	; 0xfbe <vfprintf+0x114>
     fbc:	55 c0       	rjmp	.+170    	; 0x1068 <vfprintf+0x1be>
     fbe:	20 c0       	rjmp	.+64     	; 0x1000 <vfprintf+0x156>
     fc0:	f8 01       	movw	r30, r16
     fc2:	80 81       	ld	r24, Z
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	0e 5f       	subi	r16, 0xFE	; 254
     fc8:	1f 4f       	sbci	r17, 0xFF	; 255
     fca:	88 24       	eor	r8, r8
     fcc:	83 94       	inc	r8
     fce:	91 2c       	mov	r9, r1
     fd0:	53 01       	movw	r10, r6
     fd2:	12 c0       	rjmp	.+36     	; 0xff8 <vfprintf+0x14e>
     fd4:	28 01       	movw	r4, r16
     fd6:	f2 e0       	ldi	r31, 0x02	; 2
     fd8:	4f 0e       	add	r4, r31
     fda:	51 1c       	adc	r5, r1
     fdc:	f8 01       	movw	r30, r16
     fde:	a0 80       	ld	r10, Z
     fe0:	b1 80       	ldd	r11, Z+1	; 0x01
     fe2:	36 fe       	sbrs	r3, 6
     fe4:	03 c0       	rjmp	.+6      	; 0xfec <vfprintf+0x142>
     fe6:	69 2d       	mov	r22, r9
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <vfprintf+0x146>
     fec:	6f ef       	ldi	r22, 0xFF	; 255
     fee:	7f ef       	ldi	r23, 0xFF	; 255
     ff0:	c5 01       	movw	r24, r10
     ff2:	38 d1       	rcall	.+624    	; 0x1264 <strnlen>
     ff4:	4c 01       	movw	r8, r24
     ff6:	82 01       	movw	r16, r4
     ff8:	f3 2d       	mov	r31, r3
     ffa:	ff 77       	andi	r31, 0x7F	; 127
     ffc:	3f 2e       	mov	r3, r31
     ffe:	15 c0       	rjmp	.+42     	; 0x102a <vfprintf+0x180>
    1000:	28 01       	movw	r4, r16
    1002:	22 e0       	ldi	r18, 0x02	; 2
    1004:	42 0e       	add	r4, r18
    1006:	51 1c       	adc	r5, r1
    1008:	f8 01       	movw	r30, r16
    100a:	a0 80       	ld	r10, Z
    100c:	b1 80       	ldd	r11, Z+1	; 0x01
    100e:	36 fe       	sbrs	r3, 6
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <vfprintf+0x16e>
    1012:	69 2d       	mov	r22, r9
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <vfprintf+0x172>
    1018:	6f ef       	ldi	r22, 0xFF	; 255
    101a:	7f ef       	ldi	r23, 0xFF	; 255
    101c:	c5 01       	movw	r24, r10
    101e:	17 d1       	rcall	.+558    	; 0x124e <strnlen_P>
    1020:	4c 01       	movw	r8, r24
    1022:	f3 2d       	mov	r31, r3
    1024:	f0 68       	ori	r31, 0x80	; 128
    1026:	3f 2e       	mov	r3, r31
    1028:	82 01       	movw	r16, r4
    102a:	33 fc       	sbrc	r3, 3
    102c:	19 c0       	rjmp	.+50     	; 0x1060 <vfprintf+0x1b6>
    102e:	82 2d       	mov	r24, r2
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	88 16       	cp	r8, r24
    1034:	99 06       	cpc	r9, r25
    1036:	a0 f4       	brcc	.+40     	; 0x1060 <vfprintf+0x1b6>
    1038:	b6 01       	movw	r22, r12
    103a:	80 e2       	ldi	r24, 0x20	; 32
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	1d d1       	rcall	.+570    	; 0x127a <fputc>
    1040:	2a 94       	dec	r2
    1042:	f5 cf       	rjmp	.-22     	; 0x102e <vfprintf+0x184>
    1044:	f5 01       	movw	r30, r10
    1046:	37 fc       	sbrc	r3, 7
    1048:	85 91       	lpm	r24, Z+
    104a:	37 fe       	sbrs	r3, 7
    104c:	81 91       	ld	r24, Z+
    104e:	5f 01       	movw	r10, r30
    1050:	b6 01       	movw	r22, r12
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	12 d1       	rcall	.+548    	; 0x127a <fputc>
    1056:	21 10       	cpse	r2, r1
    1058:	2a 94       	dec	r2
    105a:	21 e0       	ldi	r18, 0x01	; 1
    105c:	82 1a       	sub	r8, r18
    105e:	91 08       	sbc	r9, r1
    1060:	81 14       	cp	r8, r1
    1062:	91 04       	cpc	r9, r1
    1064:	79 f7       	brne	.-34     	; 0x1044 <vfprintf+0x19a>
    1066:	e1 c0       	rjmp	.+450    	; 0x122a <vfprintf+0x380>
    1068:	84 36       	cpi	r24, 0x64	; 100
    106a:	11 f0       	breq	.+4      	; 0x1070 <vfprintf+0x1c6>
    106c:	89 36       	cpi	r24, 0x69	; 105
    106e:	39 f5       	brne	.+78     	; 0x10be <vfprintf+0x214>
    1070:	f8 01       	movw	r30, r16
    1072:	37 fe       	sbrs	r3, 7
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <vfprintf+0x1da>
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	0c 5f       	subi	r16, 0xFC	; 252
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	08 c0       	rjmp	.+16     	; 0x1094 <vfprintf+0x1ea>
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	07 2e       	mov	r0, r23
    108a:	00 0c       	add	r0, r0
    108c:	88 0b       	sbc	r24, r24
    108e:	99 0b       	sbc	r25, r25
    1090:	0e 5f       	subi	r16, 0xFE	; 254
    1092:	1f 4f       	sbci	r17, 0xFF	; 255
    1094:	f3 2d       	mov	r31, r3
    1096:	ff 76       	andi	r31, 0x6F	; 111
    1098:	3f 2e       	mov	r3, r31
    109a:	97 ff       	sbrs	r25, 7
    109c:	09 c0       	rjmp	.+18     	; 0x10b0 <vfprintf+0x206>
    109e:	90 95       	com	r25
    10a0:	80 95       	com	r24
    10a2:	70 95       	com	r23
    10a4:	61 95       	neg	r22
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255
    10a8:	8f 4f       	sbci	r24, 0xFF	; 255
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	f0 68       	ori	r31, 0x80	; 128
    10ae:	3f 2e       	mov	r3, r31
    10b0:	2a e0       	ldi	r18, 0x0A	; 10
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	a3 01       	movw	r20, r6
    10b6:	1d d1       	rcall	.+570    	; 0x12f2 <__ultoa_invert>
    10b8:	88 2e       	mov	r8, r24
    10ba:	86 18       	sub	r8, r6
    10bc:	44 c0       	rjmp	.+136    	; 0x1146 <vfprintf+0x29c>
    10be:	85 37       	cpi	r24, 0x75	; 117
    10c0:	31 f4       	brne	.+12     	; 0x10ce <vfprintf+0x224>
    10c2:	23 2d       	mov	r18, r3
    10c4:	2f 7e       	andi	r18, 0xEF	; 239
    10c6:	b2 2e       	mov	r11, r18
    10c8:	2a e0       	ldi	r18, 0x0A	; 10
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	25 c0       	rjmp	.+74     	; 0x1118 <vfprintf+0x26e>
    10ce:	93 2d       	mov	r25, r3
    10d0:	99 7f       	andi	r25, 0xF9	; 249
    10d2:	b9 2e       	mov	r11, r25
    10d4:	8f 36       	cpi	r24, 0x6F	; 111
    10d6:	c1 f0       	breq	.+48     	; 0x1108 <vfprintf+0x25e>
    10d8:	18 f4       	brcc	.+6      	; 0x10e0 <vfprintf+0x236>
    10da:	88 35       	cpi	r24, 0x58	; 88
    10dc:	79 f0       	breq	.+30     	; 0x10fc <vfprintf+0x252>
    10de:	ae c0       	rjmp	.+348    	; 0x123c <vfprintf+0x392>
    10e0:	80 37       	cpi	r24, 0x70	; 112
    10e2:	19 f0       	breq	.+6      	; 0x10ea <vfprintf+0x240>
    10e4:	88 37       	cpi	r24, 0x78	; 120
    10e6:	21 f0       	breq	.+8      	; 0x10f0 <vfprintf+0x246>
    10e8:	a9 c0       	rjmp	.+338    	; 0x123c <vfprintf+0x392>
    10ea:	e9 2f       	mov	r30, r25
    10ec:	e0 61       	ori	r30, 0x10	; 16
    10ee:	be 2e       	mov	r11, r30
    10f0:	b4 fe       	sbrs	r11, 4
    10f2:	0d c0       	rjmp	.+26     	; 0x110e <vfprintf+0x264>
    10f4:	fb 2d       	mov	r31, r11
    10f6:	f4 60       	ori	r31, 0x04	; 4
    10f8:	bf 2e       	mov	r11, r31
    10fa:	09 c0       	rjmp	.+18     	; 0x110e <vfprintf+0x264>
    10fc:	34 fe       	sbrs	r3, 4
    10fe:	0a c0       	rjmp	.+20     	; 0x1114 <vfprintf+0x26a>
    1100:	29 2f       	mov	r18, r25
    1102:	26 60       	ori	r18, 0x06	; 6
    1104:	b2 2e       	mov	r11, r18
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <vfprintf+0x26a>
    1108:	28 e0       	ldi	r18, 0x08	; 8
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	05 c0       	rjmp	.+10     	; 0x1118 <vfprintf+0x26e>
    110e:	20 e1       	ldi	r18, 0x10	; 16
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <vfprintf+0x26e>
    1114:	20 e1       	ldi	r18, 0x10	; 16
    1116:	32 e0       	ldi	r19, 0x02	; 2
    1118:	f8 01       	movw	r30, r16
    111a:	b7 fe       	sbrs	r11, 7
    111c:	07 c0       	rjmp	.+14     	; 0x112c <vfprintf+0x282>
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	0c 5f       	subi	r16, 0xFC	; 252
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	06 c0       	rjmp	.+12     	; 0x1138 <vfprintf+0x28e>
    112c:	60 81       	ld	r22, Z
    112e:	71 81       	ldd	r23, Z+1	; 0x01
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 5f       	subi	r16, 0xFE	; 254
    1136:	1f 4f       	sbci	r17, 0xFF	; 255
    1138:	a3 01       	movw	r20, r6
    113a:	db d0       	rcall	.+438    	; 0x12f2 <__ultoa_invert>
    113c:	88 2e       	mov	r8, r24
    113e:	86 18       	sub	r8, r6
    1140:	fb 2d       	mov	r31, r11
    1142:	ff 77       	andi	r31, 0x7F	; 127
    1144:	3f 2e       	mov	r3, r31
    1146:	36 fe       	sbrs	r3, 6
    1148:	0d c0       	rjmp	.+26     	; 0x1164 <vfprintf+0x2ba>
    114a:	23 2d       	mov	r18, r3
    114c:	2e 7f       	andi	r18, 0xFE	; 254
    114e:	a2 2e       	mov	r10, r18
    1150:	89 14       	cp	r8, r9
    1152:	58 f4       	brcc	.+22     	; 0x116a <vfprintf+0x2c0>
    1154:	34 fe       	sbrs	r3, 4
    1156:	0b c0       	rjmp	.+22     	; 0x116e <vfprintf+0x2c4>
    1158:	32 fc       	sbrc	r3, 2
    115a:	09 c0       	rjmp	.+18     	; 0x116e <vfprintf+0x2c4>
    115c:	83 2d       	mov	r24, r3
    115e:	8e 7e       	andi	r24, 0xEE	; 238
    1160:	a8 2e       	mov	r10, r24
    1162:	05 c0       	rjmp	.+10     	; 0x116e <vfprintf+0x2c4>
    1164:	b8 2c       	mov	r11, r8
    1166:	a3 2c       	mov	r10, r3
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <vfprintf+0x2c6>
    116a:	b8 2c       	mov	r11, r8
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <vfprintf+0x2c6>
    116e:	b9 2c       	mov	r11, r9
    1170:	a4 fe       	sbrs	r10, 4
    1172:	0f c0       	rjmp	.+30     	; 0x1192 <vfprintf+0x2e8>
    1174:	fe 01       	movw	r30, r28
    1176:	e8 0d       	add	r30, r8
    1178:	f1 1d       	adc	r31, r1
    117a:	80 81       	ld	r24, Z
    117c:	80 33       	cpi	r24, 0x30	; 48
    117e:	21 f4       	brne	.+8      	; 0x1188 <vfprintf+0x2de>
    1180:	9a 2d       	mov	r25, r10
    1182:	99 7e       	andi	r25, 0xE9	; 233
    1184:	a9 2e       	mov	r10, r25
    1186:	09 c0       	rjmp	.+18     	; 0x119a <vfprintf+0x2f0>
    1188:	a2 fe       	sbrs	r10, 2
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <vfprintf+0x2ee>
    118c:	b3 94       	inc	r11
    118e:	b3 94       	inc	r11
    1190:	04 c0       	rjmp	.+8      	; 0x119a <vfprintf+0x2f0>
    1192:	8a 2d       	mov	r24, r10
    1194:	86 78       	andi	r24, 0x86	; 134
    1196:	09 f0       	breq	.+2      	; 0x119a <vfprintf+0x2f0>
    1198:	b3 94       	inc	r11
    119a:	a3 fc       	sbrc	r10, 3
    119c:	10 c0       	rjmp	.+32     	; 0x11be <vfprintf+0x314>
    119e:	a0 fe       	sbrs	r10, 0
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <vfprintf+0x304>
    11a2:	b2 14       	cp	r11, r2
    11a4:	80 f4       	brcc	.+32     	; 0x11c6 <vfprintf+0x31c>
    11a6:	28 0c       	add	r2, r8
    11a8:	92 2c       	mov	r9, r2
    11aa:	9b 18       	sub	r9, r11
    11ac:	0d c0       	rjmp	.+26     	; 0x11c8 <vfprintf+0x31e>
    11ae:	b2 14       	cp	r11, r2
    11b0:	58 f4       	brcc	.+22     	; 0x11c8 <vfprintf+0x31e>
    11b2:	b6 01       	movw	r22, r12
    11b4:	80 e2       	ldi	r24, 0x20	; 32
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	60 d0       	rcall	.+192    	; 0x127a <fputc>
    11ba:	b3 94       	inc	r11
    11bc:	f8 cf       	rjmp	.-16     	; 0x11ae <vfprintf+0x304>
    11be:	b2 14       	cp	r11, r2
    11c0:	18 f4       	brcc	.+6      	; 0x11c8 <vfprintf+0x31e>
    11c2:	2b 18       	sub	r2, r11
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <vfprintf+0x320>
    11c6:	98 2c       	mov	r9, r8
    11c8:	21 2c       	mov	r2, r1
    11ca:	a4 fe       	sbrs	r10, 4
    11cc:	0f c0       	rjmp	.+30     	; 0x11ec <vfprintf+0x342>
    11ce:	b6 01       	movw	r22, r12
    11d0:	80 e3       	ldi	r24, 0x30	; 48
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	52 d0       	rcall	.+164    	; 0x127a <fputc>
    11d6:	a2 fe       	sbrs	r10, 2
    11d8:	16 c0       	rjmp	.+44     	; 0x1206 <vfprintf+0x35c>
    11da:	a1 fc       	sbrc	r10, 1
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <vfprintf+0x33a>
    11de:	88 e7       	ldi	r24, 0x78	; 120
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <vfprintf+0x33e>
    11e4:	88 e5       	ldi	r24, 0x58	; 88
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	b6 01       	movw	r22, r12
    11ea:	0c c0       	rjmp	.+24     	; 0x1204 <vfprintf+0x35a>
    11ec:	8a 2d       	mov	r24, r10
    11ee:	86 78       	andi	r24, 0x86	; 134
    11f0:	51 f0       	breq	.+20     	; 0x1206 <vfprintf+0x35c>
    11f2:	a1 fe       	sbrs	r10, 1
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <vfprintf+0x350>
    11f6:	8b e2       	ldi	r24, 0x2B	; 43
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <vfprintf+0x352>
    11fa:	80 e2       	ldi	r24, 0x20	; 32
    11fc:	a7 fc       	sbrc	r10, 7
    11fe:	8d e2       	ldi	r24, 0x2D	; 45
    1200:	b6 01       	movw	r22, r12
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	3a d0       	rcall	.+116    	; 0x127a <fputc>
    1206:	89 14       	cp	r8, r9
    1208:	30 f4       	brcc	.+12     	; 0x1216 <vfprintf+0x36c>
    120a:	b6 01       	movw	r22, r12
    120c:	80 e3       	ldi	r24, 0x30	; 48
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	34 d0       	rcall	.+104    	; 0x127a <fputc>
    1212:	9a 94       	dec	r9
    1214:	f8 cf       	rjmp	.-16     	; 0x1206 <vfprintf+0x35c>
    1216:	8a 94       	dec	r8
    1218:	f3 01       	movw	r30, r6
    121a:	e8 0d       	add	r30, r8
    121c:	f1 1d       	adc	r31, r1
    121e:	80 81       	ld	r24, Z
    1220:	b6 01       	movw	r22, r12
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	2a d0       	rcall	.+84     	; 0x127a <fputc>
    1226:	81 10       	cpse	r8, r1
    1228:	f6 cf       	rjmp	.-20     	; 0x1216 <vfprintf+0x36c>
    122a:	22 20       	and	r2, r2
    122c:	09 f4       	brne	.+2      	; 0x1230 <vfprintf+0x386>
    122e:	4e ce       	rjmp	.-868    	; 0xecc <vfprintf+0x22>
    1230:	b6 01       	movw	r22, r12
    1232:	80 e2       	ldi	r24, 0x20	; 32
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	21 d0       	rcall	.+66     	; 0x127a <fputc>
    1238:	2a 94       	dec	r2
    123a:	f7 cf       	rjmp	.-18     	; 0x122a <vfprintf+0x380>
    123c:	f6 01       	movw	r30, r12
    123e:	86 81       	ldd	r24, Z+6	; 0x06
    1240:	97 81       	ldd	r25, Z+7	; 0x07
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <vfprintf+0x39e>
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	9f ef       	ldi	r25, 0xFF	; 255
    1248:	2b 96       	adiw	r28, 0x0b	; 11
    124a:	e2 e1       	ldi	r30, 0x12	; 18
    124c:	cc c0       	rjmp	.+408    	; 0x13e6 <__epilogue_restores__>

0000124e <strnlen_P>:
    124e:	fc 01       	movw	r30, r24
    1250:	05 90       	lpm	r0, Z+
    1252:	61 50       	subi	r22, 0x01	; 1
    1254:	70 40       	sbci	r23, 0x00	; 0
    1256:	01 10       	cpse	r0, r1
    1258:	d8 f7       	brcc	.-10     	; 0x1250 <strnlen_P+0x2>
    125a:	80 95       	com	r24
    125c:	90 95       	com	r25
    125e:	8e 0f       	add	r24, r30
    1260:	9f 1f       	adc	r25, r31
    1262:	08 95       	ret

00001264 <strnlen>:
    1264:	fc 01       	movw	r30, r24
    1266:	61 50       	subi	r22, 0x01	; 1
    1268:	70 40       	sbci	r23, 0x00	; 0
    126a:	01 90       	ld	r0, Z+
    126c:	01 10       	cpse	r0, r1
    126e:	d8 f7       	brcc	.-10     	; 0x1266 <strnlen+0x2>
    1270:	80 95       	com	r24
    1272:	90 95       	com	r25
    1274:	8e 0f       	add	r24, r30
    1276:	9f 1f       	adc	r25, r31
    1278:	08 95       	ret

0000127a <fputc>:
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	fb 01       	movw	r30, r22
    1284:	23 81       	ldd	r18, Z+3	; 0x03
    1286:	21 fd       	sbrc	r18, 1
    1288:	03 c0       	rjmp	.+6      	; 0x1290 <fputc+0x16>
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	9f ef       	ldi	r25, 0xFF	; 255
    128e:	2c c0       	rjmp	.+88     	; 0x12e8 <fputc+0x6e>
    1290:	22 ff       	sbrs	r18, 2
    1292:	16 c0       	rjmp	.+44     	; 0x12c0 <fputc+0x46>
    1294:	46 81       	ldd	r20, Z+6	; 0x06
    1296:	57 81       	ldd	r21, Z+7	; 0x07
    1298:	24 81       	ldd	r18, Z+4	; 0x04
    129a:	35 81       	ldd	r19, Z+5	; 0x05
    129c:	42 17       	cp	r20, r18
    129e:	53 07       	cpc	r21, r19
    12a0:	44 f4       	brge	.+16     	; 0x12b2 <fputc+0x38>
    12a2:	a0 81       	ld	r26, Z
    12a4:	b1 81       	ldd	r27, Z+1	; 0x01
    12a6:	9d 01       	movw	r18, r26
    12a8:	2f 5f       	subi	r18, 0xFF	; 255
    12aa:	3f 4f       	sbci	r19, 0xFF	; 255
    12ac:	31 83       	std	Z+1, r19	; 0x01
    12ae:	20 83       	st	Z, r18
    12b0:	8c 93       	st	X, r24
    12b2:	26 81       	ldd	r18, Z+6	; 0x06
    12b4:	37 81       	ldd	r19, Z+7	; 0x07
    12b6:	2f 5f       	subi	r18, 0xFF	; 255
    12b8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ba:	37 83       	std	Z+7, r19	; 0x07
    12bc:	26 83       	std	Z+6, r18	; 0x06
    12be:	14 c0       	rjmp	.+40     	; 0x12e8 <fputc+0x6e>
    12c0:	8b 01       	movw	r16, r22
    12c2:	ec 01       	movw	r28, r24
    12c4:	fb 01       	movw	r30, r22
    12c6:	00 84       	ldd	r0, Z+8	; 0x08
    12c8:	f1 85       	ldd	r31, Z+9	; 0x09
    12ca:	e0 2d       	mov	r30, r0
    12cc:	09 95       	icall
    12ce:	89 2b       	or	r24, r25
    12d0:	e1 f6       	brne	.-72     	; 0x128a <fputc+0x10>
    12d2:	d8 01       	movw	r26, r16
    12d4:	16 96       	adiw	r26, 0x06	; 6
    12d6:	8d 91       	ld	r24, X+
    12d8:	9c 91       	ld	r25, X
    12da:	17 97       	sbiw	r26, 0x07	; 7
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	17 96       	adiw	r26, 0x07	; 7
    12e0:	9c 93       	st	X, r25
    12e2:	8e 93       	st	-X, r24
    12e4:	16 97       	sbiw	r26, 0x06	; 6
    12e6:	ce 01       	movw	r24, r28
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	08 95       	ret

000012f2 <__ultoa_invert>:
    12f2:	fa 01       	movw	r30, r20
    12f4:	aa 27       	eor	r26, r26
    12f6:	28 30       	cpi	r18, 0x08	; 8
    12f8:	51 f1       	breq	.+84     	; 0x134e <__ultoa_invert+0x5c>
    12fa:	20 31       	cpi	r18, 0x10	; 16
    12fc:	81 f1       	breq	.+96     	; 0x135e <__ultoa_invert+0x6c>
    12fe:	e8 94       	clt
    1300:	6f 93       	push	r22
    1302:	6e 7f       	andi	r22, 0xFE	; 254
    1304:	6e 5f       	subi	r22, 0xFE	; 254
    1306:	7f 4f       	sbci	r23, 0xFF	; 255
    1308:	8f 4f       	sbci	r24, 0xFF	; 255
    130a:	9f 4f       	sbci	r25, 0xFF	; 255
    130c:	af 4f       	sbci	r26, 0xFF	; 255
    130e:	b1 e0       	ldi	r27, 0x01	; 1
    1310:	3e d0       	rcall	.+124    	; 0x138e <__ultoa_invert+0x9c>
    1312:	b4 e0       	ldi	r27, 0x04	; 4
    1314:	3c d0       	rcall	.+120    	; 0x138e <__ultoa_invert+0x9c>
    1316:	67 0f       	add	r22, r23
    1318:	78 1f       	adc	r23, r24
    131a:	89 1f       	adc	r24, r25
    131c:	9a 1f       	adc	r25, r26
    131e:	a1 1d       	adc	r26, r1
    1320:	68 0f       	add	r22, r24
    1322:	79 1f       	adc	r23, r25
    1324:	8a 1f       	adc	r24, r26
    1326:	91 1d       	adc	r25, r1
    1328:	a1 1d       	adc	r26, r1
    132a:	6a 0f       	add	r22, r26
    132c:	71 1d       	adc	r23, r1
    132e:	81 1d       	adc	r24, r1
    1330:	91 1d       	adc	r25, r1
    1332:	a1 1d       	adc	r26, r1
    1334:	20 d0       	rcall	.+64     	; 0x1376 <__ultoa_invert+0x84>
    1336:	09 f4       	brne	.+2      	; 0x133a <__ultoa_invert+0x48>
    1338:	68 94       	set
    133a:	3f 91       	pop	r19
    133c:	2a e0       	ldi	r18, 0x0A	; 10
    133e:	26 9f       	mul	r18, r22
    1340:	11 24       	eor	r1, r1
    1342:	30 19       	sub	r19, r0
    1344:	30 5d       	subi	r19, 0xD0	; 208
    1346:	31 93       	st	Z+, r19
    1348:	de f6       	brtc	.-74     	; 0x1300 <__ultoa_invert+0xe>
    134a:	cf 01       	movw	r24, r30
    134c:	08 95       	ret
    134e:	46 2f       	mov	r20, r22
    1350:	47 70       	andi	r20, 0x07	; 7
    1352:	40 5d       	subi	r20, 0xD0	; 208
    1354:	41 93       	st	Z+, r20
    1356:	b3 e0       	ldi	r27, 0x03	; 3
    1358:	0f d0       	rcall	.+30     	; 0x1378 <__ultoa_invert+0x86>
    135a:	c9 f7       	brne	.-14     	; 0x134e <__ultoa_invert+0x5c>
    135c:	f6 cf       	rjmp	.-20     	; 0x134a <__ultoa_invert+0x58>
    135e:	46 2f       	mov	r20, r22
    1360:	4f 70       	andi	r20, 0x0F	; 15
    1362:	40 5d       	subi	r20, 0xD0	; 208
    1364:	4a 33       	cpi	r20, 0x3A	; 58
    1366:	18 f0       	brcs	.+6      	; 0x136e <__ultoa_invert+0x7c>
    1368:	49 5d       	subi	r20, 0xD9	; 217
    136a:	31 fd       	sbrc	r19, 1
    136c:	40 52       	subi	r20, 0x20	; 32
    136e:	41 93       	st	Z+, r20
    1370:	02 d0       	rcall	.+4      	; 0x1376 <__ultoa_invert+0x84>
    1372:	a9 f7       	brne	.-22     	; 0x135e <__ultoa_invert+0x6c>
    1374:	ea cf       	rjmp	.-44     	; 0x134a <__ultoa_invert+0x58>
    1376:	b4 e0       	ldi	r27, 0x04	; 4
    1378:	a6 95       	lsr	r26
    137a:	97 95       	ror	r25
    137c:	87 95       	ror	r24
    137e:	77 95       	ror	r23
    1380:	67 95       	ror	r22
    1382:	ba 95       	dec	r27
    1384:	c9 f7       	brne	.-14     	; 0x1378 <__ultoa_invert+0x86>
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	61 05       	cpc	r22, r1
    138a:	71 05       	cpc	r23, r1
    138c:	08 95       	ret
    138e:	9b 01       	movw	r18, r22
    1390:	ac 01       	movw	r20, r24
    1392:	0a 2e       	mov	r0, r26
    1394:	06 94       	lsr	r0
    1396:	57 95       	ror	r21
    1398:	47 95       	ror	r20
    139a:	37 95       	ror	r19
    139c:	27 95       	ror	r18
    139e:	ba 95       	dec	r27
    13a0:	c9 f7       	brne	.-14     	; 0x1394 <__ultoa_invert+0xa2>
    13a2:	62 0f       	add	r22, r18
    13a4:	73 1f       	adc	r23, r19
    13a6:	84 1f       	adc	r24, r20
    13a8:	95 1f       	adc	r25, r21
    13aa:	a0 1d       	adc	r26, r0
    13ac:	08 95       	ret

000013ae <__prologue_saves__>:
    13ae:	2f 92       	push	r2
    13b0:	3f 92       	push	r3
    13b2:	4f 92       	push	r4
    13b4:	5f 92       	push	r5
    13b6:	6f 92       	push	r6
    13b8:	7f 92       	push	r7
    13ba:	8f 92       	push	r8
    13bc:	9f 92       	push	r9
    13be:	af 92       	push	r10
    13c0:	bf 92       	push	r11
    13c2:	cf 92       	push	r12
    13c4:	df 92       	push	r13
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	ca 1b       	sub	r28, r26
    13d8:	db 0b       	sbc	r29, r27
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	09 94       	ijmp

000013e6 <__epilogue_restores__>:
    13e6:	2a 88       	ldd	r2, Y+18	; 0x12
    13e8:	39 88       	ldd	r3, Y+17	; 0x11
    13ea:	48 88       	ldd	r4, Y+16	; 0x10
    13ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    13ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    13f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    13f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    13f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    13f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    13f8:	b9 84       	ldd	r11, Y+9	; 0x09
    13fa:	c8 84       	ldd	r12, Y+8	; 0x08
    13fc:	df 80       	ldd	r13, Y+7	; 0x07
    13fe:	ee 80       	ldd	r14, Y+6	; 0x06
    1400:	fd 80       	ldd	r15, Y+5	; 0x05
    1402:	0c 81       	ldd	r16, Y+4	; 0x04
    1404:	1b 81       	ldd	r17, Y+3	; 0x03
    1406:	aa 81       	ldd	r26, Y+2	; 0x02
    1408:	b9 81       	ldd	r27, Y+1	; 0x01
    140a:	ce 0f       	add	r28, r30
    140c:	d1 1d       	adc	r29, r1
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	ed 01       	movw	r28, r26
    141a:	08 95       	ret

0000141c <_exit>:
    141c:	f8 94       	cli

0000141e <__stop_program>:
    141e:	ff cf       	rjmp	.-2      	; 0x141e <__stop_program>
